apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: analysisnotes.container.google.kubeform.com
spec:
  group: container.google.kubeform.com
  names:
    kind: AnalysisNote
    listKind: AnalysisNoteList
    plural: analysisnotes
    singular: analysisnote
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              attestationAuthority:
                description: Note kind that represents a logical attestation "role"
                  or "authority". For example, an organization might have one AttestationAuthority
                  for "QA" and one for "build". This Note is intended to act strictly
                  as a grouping mechanism for the attached Occurrences (Attestations).
                  This grouping mechanism also provides a security boundary, since
                  IAM ACLs gate the ability for a principle to attach an Occurrence
                  to a given Note. It also provides a single point of lookup to find
                  all attached Attestation Occurrences, even if they don't all live
                  in the same project.
                properties:
                  hint:
                    description: This submessage provides human-readable hints about
                      the purpose of the AttestationAuthority. Because the name of
                      a Note acts as its resource reference, it is important to disambiguate
                      the canonical name of the Note (which might be a UUID for security
                      purposes) from "readable" names more suitable for debug output.
                      Note that these hints should NOT be used to look up AttestationAuthorities
                      in security sensitive contexts, such as when looking up Attestations
                      to verify.
                    properties:
                      humanReadableName:
                        description: The human readable name of this Attestation Authority,
                          for example "qa".
                        type: string
                    required:
                    - humanReadableName
                    type: object
                required:
                - hint
                type: object
              createTime:
                description: The time this note was created.
                type: string
              expirationTime:
                description: Time of expiration for this note. Leave empty if note
                  does not expire.
                type: string
              id:
                type: string
              kind:
                description: The type of analysis this note describes
                type: string
              kubeformOutput:
                properties:
                  attestationAuthority:
                    description: Note kind that represents a logical attestation "role"
                      or "authority". For example, an organization might have one
                      AttestationAuthority for "QA" and one for "build". This Note
                      is intended to act strictly as a grouping mechanism for the
                      attached Occurrences (Attestations). This grouping mechanism
                      also provides a security boundary, since IAM ACLs gate the ability
                      for a principle to attach an Occurrence to a given Note. It
                      also provides a single point of lookup to find all attached
                      Attestation Occurrences, even if they don't all live in the
                      same project.
                    properties:
                      hint:
                        description: This submessage provides human-readable hints
                          about the purpose of the AttestationAuthority. Because the
                          name of a Note acts as its resource reference, it is important
                          to disambiguate the canonical name of the Note (which might
                          be a UUID for security purposes) from "readable" names more
                          suitable for debug output. Note that these hints should
                          NOT be used to look up AttestationAuthorities in security
                          sensitive contexts, such as when looking up Attestations
                          to verify.
                        properties:
                          humanReadableName:
                            description: The human readable name of this Attestation
                              Authority, for example "qa".
                            type: string
                        required:
                        - humanReadableName
                        type: object
                    required:
                    - hint
                    type: object
                  createTime:
                    description: The time this note was created.
                    type: string
                  expirationTime:
                    description: Time of expiration for this note. Leave empty if
                      note does not expire.
                    type: string
                  id:
                    type: string
                  kind:
                    description: The type of analysis this note describes
                    type: string
                  longDescription:
                    description: A detailed description of the note
                    type: string
                  name:
                    description: The name of the note.
                    type: string
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  relatedNoteNames:
                    description: Names of other notes related to this note.
                    items:
                      type: string
                    type: array
                  relatedURL:
                    description: URLs associated with this note and related metadata.
                    items:
                      properties:
                        label:
                          description: Label to describe usage of the URL
                          type: string
                        url:
                          description: Specific URL associated with the resource.
                          type: string
                      required:
                      - url
                      type: object
                    type: array
                  shortDescription:
                    description: A one sentence description of the note.
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  timeouts:
                    properties:
                      create:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      default:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      delete:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      read:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      update:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                    type: object
                  updateTime:
                    description: The time this note was last updated.
                    type: string
                required:
                - attestationAuthority
                - name
                - providerRef
                type: object
              longDescription:
                description: A detailed description of the note
                type: string
              name:
                description: The name of the note.
                type: string
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              relatedNoteNames:
                description: Names of other notes related to this note.
                items:
                  type: string
                type: array
              relatedURL:
                description: URLs associated with this note and related metadata.
                items:
                  properties:
                    label:
                      description: Label to describe usage of the URL
                      type: string
                    url:
                      description: Specific URL associated with the resource.
                      type: string
                  required:
                  - url
                  type: object
                type: array
              shortDescription:
                description: A one sentence description of the note.
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              timeouts:
                properties:
                  create:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  default:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  delete:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  read:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  update:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                type: object
              updateTime:
                description: The time this note was last updated.
                type: string
            required:
            - attestationAuthority
            - name
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: nodepools.container.google.kubeform.com
spec:
  group: container.google.kubeform.com
  names:
    kind: NodePool
    listKind: NodePoolList
    plural: nodepools
    singular: nodepool
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              autoscaling:
                description: Configuration required by cluster autoscaler to adjust
                  the size of the node pool to the current cluster usage.
                properties:
                  maxNodeCount:
                    description: Maximum number of nodes in the NodePool. Must be
                      >= min_node_count.
                    format: int64
                    type: integer
                  minNodeCount:
                    description: Minimum number of nodes in the NodePool. Must be
                      >=0 and <= max_node_count.
                    format: int64
                    type: integer
                required:
                - maxNodeCount
                - minNodeCount
                type: object
              cluster:
                description: The cluster to create the node pool for. Cluster must
                  be present in location provided for zonal clusters.
                type: string
              id:
                type: string
              initialNodeCount:
                description: The initial number of nodes for the pool. In regional
                  or multi-zonal clusters, this is the number of nodes per zone. Changing
                  this will force recreation of the resource.
                format: int64
                type: integer
              instanceGroupUrls:
                description: The resource URLs of the managed instance groups associated
                  with this node pool.
                items:
                  type: string
                type: array
              kubeformOutput:
                properties:
                  autoscaling:
                    description: Configuration required by cluster autoscaler to adjust
                      the size of the node pool to the current cluster usage.
                    properties:
                      maxNodeCount:
                        description: Maximum number of nodes in the NodePool. Must
                          be >= min_node_count.
                        format: int64
                        type: integer
                      minNodeCount:
                        description: Minimum number of nodes in the NodePool. Must
                          be >=0 and <= max_node_count.
                        format: int64
                        type: integer
                    required:
                    - maxNodeCount
                    - minNodeCount
                    type: object
                  cluster:
                    description: The cluster to create the node pool for. Cluster
                      must be present in location provided for zonal clusters.
                    type: string
                  id:
                    type: string
                  initialNodeCount:
                    description: The initial number of nodes for the pool. In regional
                      or multi-zonal clusters, this is the number of nodes per zone.
                      Changing this will force recreation of the resource.
                    format: int64
                    type: integer
                  instanceGroupUrls:
                    description: The resource URLs of the managed instance groups
                      associated with this node pool.
                    items:
                      type: string
                    type: array
                  location:
                    description: The location (region or zone) of the cluster.
                    type: string
                  management:
                    description: Node management configuration, wherein auto-repair
                      and auto-upgrade is configured.
                    properties:
                      autoRepair:
                        description: Whether the nodes will be automatically repaired.
                        type: boolean
                      autoUpgrade:
                        description: Whether the nodes will be automatically upgraded.
                        type: boolean
                    type: object
                  maxPodsPerNode:
                    description: The maximum number of pods per node in this node
                      pool. Note that this does not work on node pools which are "route-based"
                      - that is, node pools belonging to clusters that do not have
                      IP Aliasing enabled.
                    format: int64
                    type: integer
                  name:
                    description: The name of the node pool. If left blank, Terraform
                      will auto-generate a unique name.
                    type: string
                  namePrefix:
                    description: Creates a unique name for the node pool beginning
                      with the specified prefix. Conflicts with name.
                    type: string
                  nodeConfig:
                    description: The configuration of the nodepool
                    properties:
                      diskSizeGb:
                        description: Size of the disk attached to each node, specified
                          in GB. The smallest allowed disk size is 10GB.
                        format: int64
                        type: integer
                      diskType:
                        description: Type of the disk attached to each node.
                        type: string
                      guestAccelerator:
                        description: List of the type and count of accelerator cards
                          attached to the instance.
                        items:
                          properties:
                            count:
                              description: The number of the accelerator cards exposed
                                to an instance.
                              format: int64
                              type: integer
                            type:
                              description: The accelerator type resource name.
                              type: string
                          required:
                          - count
                          - type
                          type: object
                        type: array
                      imageType:
                        description: The image type to use for this node. Note that
                          for a given image type, the latest version of it will be
                          used.
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: The map of Kubernetes labels (key/value pairs)
                          to be applied to each node. These will added in addition
                          to any default label(s) that Kubernetes may apply to the
                          node.
                        type: object
                      localSsdCount:
                        description: The number of local SSD disks to be attached
                          to the node.
                        format: int64
                        type: integer
                      machineType:
                        description: The name of a Google Compute Engine machine type.
                        type: string
                      metadata:
                        additionalProperties:
                          type: string
                        description: The metadata key/value pairs assigned to instances
                          in the cluster.
                        type: object
                      minCPUPlatform:
                        description: Minimum CPU platform to be used by this instance.
                          The instance may be scheduled on the specified or newer
                          CPU platform.
                        type: string
                      oauthScopes:
                        description: The set of Google API scopes to be made available
                          on all of the node VMs.
                        items:
                          type: string
                        type: array
                      preemptible:
                        description: Whether the nodes are created as preemptible
                          VM instances.
                        type: boolean
                      serviceAccount:
                        description: The Google Cloud Platform Service Account to
                          be used by the node VMs.
                        type: string
                      shieldedInstanceConfig:
                        description: Shielded Instance options.
                        properties:
                          enableIntegrityMonitoring:
                            description: Defines whether the instance has integrity
                              monitoring enabled.
                            type: boolean
                          enableSecureBoot:
                            description: Defines whether the instance has Secure Boot
                              enabled.
                            type: boolean
                        type: object
                      tags:
                        description: The list of instance tags applied to all nodes.
                        items:
                          type: string
                        type: array
                      taint:
                        description: List of Kubernetes taints to be applied to each
                          node.
                        items:
                          properties:
                            effect:
                              description: Effect for taint.
                              type: string
                            key:
                              description: Key for taint.
                              type: string
                            value:
                              description: Value for taint.
                              type: string
                          required:
                          - effect
                          - key
                          - value
                          type: object
                        type: array
                      workloadMetadataConfig:
                        description: The workload metadata configuration for this
                          node.
                        properties:
                          nodeMetadata:
                            description: NodeMetadata is the configuration for how
                              to expose metadata to the workloads running on the node.
                            type: string
                        required:
                        - nodeMetadata
                        type: object
                    type: object
                  nodeCount:
                    description: The number of nodes per instance group. This field
                      can be used to update the number of nodes per instance group
                      but should not be used alongside autoscaling.
                    format: int64
                    type: integer
                  nodeLocations:
                    description: The list of zones in which the node pool's nodes
                      should be located. Nodes must be in the region of their regional
                      cluster or in the same region as their cluster's zone for zonal
                      clusters. If unspecified, the cluster-level node_locations will
                      be used.
                    items:
                      type: string
                    type: array
                  operation:
                    type: string
                  project:
                    description: The ID of the project in which to create the node
                      pool. If blank, the provider-configured project will be used.
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  timeouts:
                    properties:
                      create:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      default:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      delete:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      read:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      update:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                    type: object
                  upgradeSettings:
                    description: Specify node upgrade settings to change how many
                      nodes GKE attempts to upgrade at once. The number of nodes upgraded
                      simultaneously is the sum of max_surge and max_unavailable.
                      The maximum number of nodes upgraded simultaneously is limited
                      to 20.
                    properties:
                      maxSurge:
                        description: The number of additional nodes that can be added
                          to the node pool during an upgrade. Increasing max_surge
                          raises the number of nodes that can be upgraded simultaneously.
                          Can be set to 0 or greater.
                        format: int64
                        type: integer
                      maxUnavailable:
                        description: The number of nodes that can be simultaneously
                          unavailable during an upgrade. Increasing max_unavailable
                          raises the number of nodes that can be upgraded in parallel.
                          Can be set to 0 or greater.
                        format: int64
                        type: integer
                    required:
                    - maxSurge
                    - maxUnavailable
                    type: object
                  version:
                    description: The Kubernetes version for the nodes in this pool.
                      Note that if this field and auto_upgrade are both specified,
                      they will fight each other for what the node version should
                      be, so setting both is highly discouraged. While a fuzzy version
                      can be specified, it's recommended that you specify explicit
                      versions as Terraform will see spurious diffs when fuzzy versions
                      are used. See the google_container_engine_versions data source's
                      version_prefix field to approximate fuzzy versions in a Terraform-compatible
                      way.
                    type: string
                required:
                - cluster
                - providerRef
                type: object
              location:
                description: The location (region or zone) of the cluster.
                type: string
              management:
                description: Node management configuration, wherein auto-repair and
                  auto-upgrade is configured.
                properties:
                  autoRepair:
                    description: Whether the nodes will be automatically repaired.
                    type: boolean
                  autoUpgrade:
                    description: Whether the nodes will be automatically upgraded.
                    type: boolean
                type: object
              maxPodsPerNode:
                description: The maximum number of pods per node in this node pool.
                  Note that this does not work on node pools which are "route-based"
                  - that is, node pools belonging to clusters that do not have IP
                  Aliasing enabled.
                format: int64
                type: integer
              name:
                description: The name of the node pool. If left blank, Terraform will
                  auto-generate a unique name.
                type: string
              namePrefix:
                description: Creates a unique name for the node pool beginning with
                  the specified prefix. Conflicts with name.
                type: string
              nodeConfig:
                description: The configuration of the nodepool
                properties:
                  diskSizeGb:
                    description: Size of the disk attached to each node, specified
                      in GB. The smallest allowed disk size is 10GB.
                    format: int64
                    type: integer
                  diskType:
                    description: Type of the disk attached to each node.
                    type: string
                  guestAccelerator:
                    description: List of the type and count of accelerator cards attached
                      to the instance.
                    items:
                      properties:
                        count:
                          description: The number of the accelerator cards exposed
                            to an instance.
                          format: int64
                          type: integer
                        type:
                          description: The accelerator type resource name.
                          type: string
                      required:
                      - count
                      - type
                      type: object
                    type: array
                  imageType:
                    description: The image type to use for this node. Note that for
                      a given image type, the latest version of it will be used.
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: The map of Kubernetes labels (key/value pairs) to
                      be applied to each node. These will added in addition to any
                      default label(s) that Kubernetes may apply to the node.
                    type: object
                  localSsdCount:
                    description: The number of local SSD disks to be attached to the
                      node.
                    format: int64
                    type: integer
                  machineType:
                    description: The name of a Google Compute Engine machine type.
                    type: string
                  metadata:
                    additionalProperties:
                      type: string
                    description: The metadata key/value pairs assigned to instances
                      in the cluster.
                    type: object
                  minCPUPlatform:
                    description: Minimum CPU platform to be used by this instance.
                      The instance may be scheduled on the specified or newer CPU
                      platform.
                    type: string
                  oauthScopes:
                    description: The set of Google API scopes to be made available
                      on all of the node VMs.
                    items:
                      type: string
                    type: array
                  preemptible:
                    description: Whether the nodes are created as preemptible VM instances.
                    type: boolean
                  serviceAccount:
                    description: The Google Cloud Platform Service Account to be used
                      by the node VMs.
                    type: string
                  shieldedInstanceConfig:
                    description: Shielded Instance options.
                    properties:
                      enableIntegrityMonitoring:
                        description: Defines whether the instance has integrity monitoring
                          enabled.
                        type: boolean
                      enableSecureBoot:
                        description: Defines whether the instance has Secure Boot
                          enabled.
                        type: boolean
                    type: object
                  tags:
                    description: The list of instance tags applied to all nodes.
                    items:
                      type: string
                    type: array
                  taint:
                    description: List of Kubernetes taints to be applied to each node.
                    items:
                      properties:
                        effect:
                          description: Effect for taint.
                          type: string
                        key:
                          description: Key for taint.
                          type: string
                        value:
                          description: Value for taint.
                          type: string
                      required:
                      - effect
                      - key
                      - value
                      type: object
                    type: array
                  workloadMetadataConfig:
                    description: The workload metadata configuration for this node.
                    properties:
                      nodeMetadata:
                        description: NodeMetadata is the configuration for how to
                          expose metadata to the workloads running on the node.
                        type: string
                    required:
                    - nodeMetadata
                    type: object
                type: object
              nodeCount:
                description: The number of nodes per instance group. This field can
                  be used to update the number of nodes per instance group but should
                  not be used alongside autoscaling.
                format: int64
                type: integer
              nodeLocations:
                description: The list of zones in which the node pool's nodes should
                  be located. Nodes must be in the region of their regional cluster
                  or in the same region as their cluster's zone for zonal clusters.
                  If unspecified, the cluster-level node_locations will be used.
                items:
                  type: string
                type: array
              operation:
                type: string
              project:
                description: The ID of the project in which to create the node pool.
                  If blank, the provider-configured project will be used.
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              timeouts:
                properties:
                  create:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  default:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  delete:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  read:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  update:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                type: object
              upgradeSettings:
                description: Specify node upgrade settings to change how many nodes
                  GKE attempts to upgrade at once. The number of nodes upgraded simultaneously
                  is the sum of max_surge and max_unavailable. The maximum number
                  of nodes upgraded simultaneously is limited to 20.
                properties:
                  maxSurge:
                    description: The number of additional nodes that can be added
                      to the node pool during an upgrade. Increasing max_surge raises
                      the number of nodes that can be upgraded simultaneously. Can
                      be set to 0 or greater.
                    format: int64
                    type: integer
                  maxUnavailable:
                    description: The number of nodes that can be simultaneously unavailable
                      during an upgrade. Increasing max_unavailable raises the number
                      of nodes that can be upgraded in parallel. Can be set to 0 or
                      greater.
                    format: int64
                    type: integer
                required:
                - maxSurge
                - maxUnavailable
                type: object
              version:
                description: The Kubernetes version for the nodes in this pool. Note
                  that if this field and auto_upgrade are both specified, they will
                  fight each other for what the node version should be, so setting
                  both is highly discouraged. While a fuzzy version can be specified,
                  it's recommended that you specify explicit versions as Terraform
                  will see spurious diffs when fuzzy versions are used. See the google_container_engine_versions
                  data source's version_prefix field to approximate fuzzy versions
                  in a Terraform-compatible way.
                type: string
            required:
            - cluster
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: analysisoccurrences.container.google.kubeform.com
spec:
  group: container.google.kubeform.com
  names:
    kind: AnalysisOccurrence
    listKind: AnalysisOccurrenceList
    plural: analysisoccurrences
    singular: analysisoccurrence
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              attestation:
                description: Occurrence that represents a single "attestation". The
                  authenticity of an attestation can be verified using the attached
                  signature. If the verifier trusts the public key of the signer,
                  then verifying the signature is sufficient to establish trust. In
                  this circumstance, the authority to which this attestation is attached
                  is primarily useful for lookup (how to find this attestation if
                  you already know the authority and artifact to be verified) and
                  intent (for which authority this attestation was intended to sign.
                properties:
                  serializedPayload:
                    description: The serialized payload that is verified by one or
                      more signatures. A base64-encoded string.
                    type: string
                  signatures:
                    description: One or more signatures over serializedPayload. Verifier
                      implementations should consider this attestation message verified
                      if at least one signature verifies serializedPayload. See Signature
                      in common.proto for more details on signature structure and
                      verification.
                    items:
                      properties:
                        publicKeyID:
                          description: "The identifier for the public key that verifies
                            this signature. MUST be an RFC3986 conformant URI. * When
                            possible, the key id should be an immutable reference,
                            such as a cryptographic digest. Examples of valid values:
                            \n * OpenPGP V4 public key fingerprint. See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr
                            \  for more details on this scheme.     * 'openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA'
                            * RFC6920 digest-named SubjectPublicKeyInfo (digest of
                            the DER serialization):     * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\""
                          type: string
                        signature:
                          description: The content of the signature, an opaque bytestring.
                            The payload that this signature verifies MUST be unambiguously
                            provided with the Signature during verification. A wrapper
                            message might provide the payload explicitly. Alternatively,
                            a message might have a canonical serialization that can
                            always be unambiguously computed to derive the payload.
                          type: string
                      required:
                      - publicKeyID
                      type: object
                    type: array
                required:
                - serializedPayload
                - signatures
                type: object
              createTime:
                description: The time when the repository was created.
                type: string
              id:
                type: string
              kind:
                description: The note kind which explicitly denotes which of the occurrence
                  details are specified. This field can be used as a filter in list
                  requests.
                type: string
              kubeformOutput:
                properties:
                  attestation:
                    description: Occurrence that represents a single "attestation".
                      The authenticity of an attestation can be verified using the
                      attached signature. If the verifier trusts the public key of
                      the signer, then verifying the signature is sufficient to establish
                      trust. In this circumstance, the authority to which this attestation
                      is attached is primarily useful for lookup (how to find this
                      attestation if you already know the authority and artifact to
                      be verified) and intent (for which authority this attestation
                      was intended to sign.
                    properties:
                      serializedPayload:
                        description: The serialized payload that is verified by one
                          or more signatures. A base64-encoded string.
                        type: string
                      signatures:
                        description: One or more signatures over serializedPayload.
                          Verifier implementations should consider this attestation
                          message verified if at least one signature verifies serializedPayload.
                          See Signature in common.proto for more details on signature
                          structure and verification.
                        items:
                          properties:
                            publicKeyID:
                              description: "The identifier for the public key that
                                verifies this signature. MUST be an RFC3986 conformant
                                URI. * When possible, the key id should be an immutable
                                reference, such as a cryptographic digest. Examples
                                of valid values: \n * OpenPGP V4 public key fingerprint.
                                See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr
                                \  for more details on this scheme.     * 'openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA'
                                * RFC6920 digest-named SubjectPublicKeyInfo (digest
                                of the DER serialization):     * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\""
                              type: string
                            signature:
                              description: The content of the signature, an opaque
                                bytestring. The payload that this signature verifies
                                MUST be unambiguously provided with the Signature
                                during verification. A wrapper message might provide
                                the payload explicitly. Alternatively, a message might
                                have a canonical serialization that can always be
                                unambiguously computed to derive the payload.
                              type: string
                          required:
                          - publicKeyID
                          type: object
                        type: array
                    required:
                    - serializedPayload
                    - signatures
                    type: object
                  createTime:
                    description: The time when the repository was created.
                    type: string
                  id:
                    type: string
                  kind:
                    description: The note kind which explicitly denotes which of the
                      occurrence details are specified. This field can be used as
                      a filter in list requests.
                    type: string
                  name:
                    description: The name of the occurrence.
                    type: string
                  noteName:
                    description: The analysis note associated with this occurrence,
                      in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field
                      can be used as a filter in list requests.
                    type: string
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  remediation:
                    description: A description of actions that can be taken to remedy
                      the note.
                    type: string
                  resourceURI:
                    description: Required. Immutable. A URI that represents the resource
                      for which the occurrence applies. For example, https://gcr.io/project/image@sha256:123abc
                      for a Docker image.
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  timeouts:
                    properties:
                      create:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      default:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      delete:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      read:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      update:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                    type: object
                  updateTime:
                    description: The time when the repository was last updated.
                    type: string
                required:
                - attestation
                - noteName
                - providerRef
                - resourceURI
                type: object
              name:
                description: The name of the occurrence.
                type: string
              noteName:
                description: The analysis note associated with this occurrence, in
                  the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
                  used as a filter in list requests.
                type: string
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              remediation:
                description: A description of actions that can be taken to remedy
                  the note.
                type: string
              resourceURI:
                description: Required. Immutable. A URI that represents the resource
                  for which the occurrence applies. For example, https://gcr.io/project/image@sha256:123abc
                  for a Docker image.
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              timeouts:
                properties:
                  create:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  default:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  delete:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  read:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  update:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                type: object
              updateTime:
                description: The time when the repository was last updated.
                type: string
            required:
            - attestation
            - noteName
            - providerRef
            - resourceURI
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: clusters.container.google.kubeform.com
spec:
  group: container.google.kubeform.com
  names:
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              addonsConfig:
                description: The configuration for addons supported by GKE.
                properties:
                  cloudrunConfig:
                    description: The status of the CloudRun addon. It is disabled
                      by default. Set disabled = false to enable.
                    properties:
                      disabled:
                        type: boolean
                      loadBalancerType:
                        type: string
                    required:
                    - disabled
                    type: object
                  horizontalPodAutoscaling:
                    description: The status of the Horizontal Pod Autoscaling addon,
                      which increases or decreases the number of replica pods a replication
                      controller has based on the resource usage of the existing pods.
                      It ensures that a Heapster pod is running in the cluster, which
                      is also used by the Cloud Monitoring service. It is enabled
                      by default; set disabled = true to disable.
                    properties:
                      disabled:
                        type: boolean
                    required:
                    - disabled
                    type: object
                  httpLoadBalancing:
                    description: The status of the HTTP (L7) load balancing controller
                      addon, which makes it easy to set up HTTP load balancers for
                      services in a cluster. It is enabled by default; set disabled
                      = true to disable.
                    properties:
                      disabled:
                        type: boolean
                    required:
                    - disabled
                    type: object
                  networkPolicyConfig:
                    description: Whether we should enable the network policy addon
                      for the master. This must be enabled in order to enable network
                      policy for the nodes. To enable this, you must also define a
                      network_policy block, otherwise nothing will happen. It can
                      only be disabled if the nodes already do not have network policies
                      enabled. Defaults to disabled; set disabled = false to enable.
                    properties:
                      disabled:
                        type: boolean
                    required:
                    - disabled
                    type: object
                type: object
              authenticatorGroupsConfig:
                description: Configuration for the Google Groups for GKE feature.
                properties:
                  securityGroup:
                    description: The name of the RBAC security group for use with
                      Google security groups in Kubernetes RBAC. Group name must be
                      in format gke-security-groups@yourdomain.com.
                    type: string
                required:
                - securityGroup
                type: object
              clusterAutoscaling:
                description: Per-cluster configuration of Node Auto-Provisioning with
                  Cluster Autoscaler to automatically adjust the size of the cluster
                  and create/delete node pools based on the current needs of the cluster's
                  workload. See the guide to using Node Auto-Provisioning for more
                  details.
                properties:
                  autoProvisioningDefaults:
                    description: Contains defaults for a node pool created by NAP.
                    properties:
                      oauthScopes:
                        description: Scopes that are used by NAP when creating node
                          pools.
                        items:
                          type: string
                        type: array
                      serviceAccount:
                        description: The Google Cloud Platform Service Account to
                          be used by the node VMs.
                        type: string
                    type: object
                  enabled:
                    description: Whether node auto-provisioning is enabled. Resource
                      limits for cpu and memory must be defined to enable node auto-provisioning.
                    type: boolean
                  resourceLimits:
                    description: Global constraints for machine resources in the cluster.
                      Configuring the cpu and memory types is required if node auto-provisioning
                      is enabled. These limits will apply to node pool autoscaling
                      in addition to node auto-provisioning.
                    items:
                      properties:
                        maximum:
                          description: Maximum amount of the resource in the cluster.
                          format: int64
                          type: integer
                        minimum:
                          description: Minimum amount of the resource in the cluster.
                          format: int64
                          type: integer
                        resourceType:
                          description: The type of the resource. For example, cpu
                            and memory. See the guide to using Node Auto-Provisioning
                            for a list of types.
                          type: string
                      required:
                      - resourceType
                      type: object
                    type: array
                required:
                - enabled
                type: object
              clusterIpv4CIDR:
                description: The IP address range of the Kubernetes pods in this cluster
                  in CIDR notation (e.g. 10.96.0.0/14). Leave blank to have one automatically
                  chosen or specify a /14 block in 10.0.0.0/8. This field will only
                  work for routes-based clusters, where ip_allocation_policy is not
                  defined.
                type: string
              databaseEncryption:
                description: 'Application-layer Secrets Encryption settings. The object
                  format is {state = string, key_name = string}. Valid values of state
                  are: "ENCRYPTED"; "DECRYPTED". key_name is the name of a CloudKMS
                  key.'
                properties:
                  keyName:
                    description: The key to use to encrypt/decrypt secrets.
                    type: string
                  state:
                    description: ENCRYPTED or DECRYPTED.
                    type: string
                required:
                - state
                type: object
              datapathProvider:
                description: The desired datapath provider for this cluster. By default,
                  uses the IPTables-based kube-proxy implementation.
                type: string
              defaultMaxPodsPerNode:
                description: The default maximum number of pods per node in this cluster.
                  This doesn't work on "routes-based" clusters, clusters that don't
                  have IP Aliasing enabled.
                format: int64
                type: integer
              defaultSnatStatus:
                description: Whether the cluster disables default in-node sNAT rules.
                  In-node sNAT rules will be disabled when defaultSnatStatus is disabled.
                properties:
                  disabled:
                    description: When disabled is set to false, default IP masquerade
                      rules will be applied to the nodes to prevent sNAT on cluster
                      internal traffic.
                    type: boolean
                required:
                - disabled
                type: object
              description:
                description: ' Description of the cluster.'
                type: string
              enableAutopilot:
                description: Enable Autopilot for this cluster.
                type: boolean
              enableBinaryAuthorization:
                description: Enable Binary Authorization for this cluster. If enabled,
                  all container images will be validated by Google Binary Authorization.
                type: boolean
              enableIntranodeVisibility:
                description: Whether Intra-node visibility is enabled for this cluster.
                  This makes same node pod to pod traffic visible for VPC network.
                type: boolean
              enableKubernetesAlpha:
                description: Whether to enable Kubernetes Alpha features for this
                  cluster. Note that when this option is enabled, the cluster cannot
                  be upgraded and will be automatically deleted after 30 days.
                type: boolean
              enableLegacyAbac:
                description: Whether the ABAC authorizer is enabled for this cluster.
                  When enabled, identities in the system, including service accounts,
                  nodes, and controllers, will have statically granted permissions
                  beyond those provided by the RBAC configuration or IAM. Defaults
                  to false.
                type: boolean
              enableShieldedNodes:
                description: Enable Shielded Nodes features on all nodes in this cluster.
                type: boolean
              enableTpu:
                description: Whether to enable Cloud TPU resources in this cluster.
                type: boolean
              endpoint:
                description: The IP address of this cluster's Kubernetes master.
                type: string
              id:
                type: string
              initialNodeCount:
                description: The number of nodes to create in this cluster's default
                  node pool. In regional or multi-zonal clusters, this is the number
                  of nodes per zone. Must be set if node_pool is not set. If you're
                  using google_container_node_pool objects with no default node pool,
                  you'll need to set this to a value of at least 1, alongside setting
                  remove_default_node_pool to true.
                format: int64
                type: integer
              instanceGroupUrls:
                description: List of instance group URLs which have been assigned
                  to the cluster.
                items:
                  type: string
                type: array
              ipAllocationPolicy:
                description: Configuration of cluster IP allocation for VPC-native
                  clusters. Adding this block enables IP aliasing, making the cluster
                  VPC-native instead of routes-based.
                properties:
                  clusterIpv4CIDRBlock:
                    description: The IP address range for the cluster pod IPs. Set
                      to blank to have a range chosen with the default size. Set to
                      /netmask (e.g. /14) to have a range chosen with a specific netmask.
                      Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918
                      private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)
                      to pick a specific range to use.
                    type: string
                  clusterSecondaryRangeName:
                    description: The name of the existing secondary range in the cluster's
                      subnetwork to use for pod IP addresses. Alternatively, cluster_ipv4_cidr_block
                      can be used to automatically create a GKE-managed one.
                    type: string
                  servicesIpv4CIDRBlock:
                    description: The IP address range of the services IPs in this
                      cluster. Set to blank to have a range chosen with the default
                      size. Set to /netmask (e.g. /14) to have a range chosen with
                      a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
                      from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12,
                      192.168.0.0/16) to pick a specific range to use.
                    type: string
                  servicesSecondaryRangeName:
                    description: The name of the existing secondary range in the cluster's
                      subnetwork to use for service ClusterIPs. Alternatively, services_ipv4_cidr_block
                      can be used to automatically create a GKE-managed one.
                    type: string
                type: object
              kubeformOutput:
                properties:
                  addonsConfig:
                    description: The configuration for addons supported by GKE.
                    properties:
                      cloudrunConfig:
                        description: The status of the CloudRun addon. It is disabled
                          by default. Set disabled = false to enable.
                        properties:
                          disabled:
                            type: boolean
                          loadBalancerType:
                            type: string
                        required:
                        - disabled
                        type: object
                      horizontalPodAutoscaling:
                        description: The status of the Horizontal Pod Autoscaling
                          addon, which increases or decreases the number of replica
                          pods a replication controller has based on the resource
                          usage of the existing pods. It ensures that a Heapster pod
                          is running in the cluster, which is also used by the Cloud
                          Monitoring service. It is enabled by default; set disabled
                          = true to disable.
                        properties:
                          disabled:
                            type: boolean
                        required:
                        - disabled
                        type: object
                      httpLoadBalancing:
                        description: The status of the HTTP (L7) load balancing controller
                          addon, which makes it easy to set up HTTP load balancers
                          for services in a cluster. It is enabled by default; set
                          disabled = true to disable.
                        properties:
                          disabled:
                            type: boolean
                        required:
                        - disabled
                        type: object
                      networkPolicyConfig:
                        description: Whether we should enable the network policy addon
                          for the master. This must be enabled in order to enable
                          network policy for the nodes. To enable this, you must also
                          define a network_policy block, otherwise nothing will happen.
                          It can only be disabled if the nodes already do not have
                          network policies enabled. Defaults to disabled; set disabled
                          = false to enable.
                        properties:
                          disabled:
                            type: boolean
                        required:
                        - disabled
                        type: object
                    type: object
                  authenticatorGroupsConfig:
                    description: Configuration for the Google Groups for GKE feature.
                    properties:
                      securityGroup:
                        description: The name of the RBAC security group for use with
                          Google security groups in Kubernetes RBAC. Group name must
                          be in format gke-security-groups@yourdomain.com.
                        type: string
                    required:
                    - securityGroup
                    type: object
                  clusterAutoscaling:
                    description: Per-cluster configuration of Node Auto-Provisioning
                      with Cluster Autoscaler to automatically adjust the size of
                      the cluster and create/delete node pools based on the current
                      needs of the cluster's workload. See the guide to using Node
                      Auto-Provisioning for more details.
                    properties:
                      autoProvisioningDefaults:
                        description: Contains defaults for a node pool created by
                          NAP.
                        properties:
                          oauthScopes:
                            description: Scopes that are used by NAP when creating
                              node pools.
                            items:
                              type: string
                            type: array
                          serviceAccount:
                            description: The Google Cloud Platform Service Account
                              to be used by the node VMs.
                            type: string
                        type: object
                      enabled:
                        description: Whether node auto-provisioning is enabled. Resource
                          limits for cpu and memory must be defined to enable node
                          auto-provisioning.
                        type: boolean
                      resourceLimits:
                        description: Global constraints for machine resources in the
                          cluster. Configuring the cpu and memory types is required
                          if node auto-provisioning is enabled. These limits will
                          apply to node pool autoscaling in addition to node auto-provisioning.
                        items:
                          properties:
                            maximum:
                              description: Maximum amount of the resource in the cluster.
                              format: int64
                              type: integer
                            minimum:
                              description: Minimum amount of the resource in the cluster.
                              format: int64
                              type: integer
                            resourceType:
                              description: The type of the resource. For example,
                                cpu and memory. See the guide to using Node Auto-Provisioning
                                for a list of types.
                              type: string
                          required:
                          - resourceType
                          type: object
                        type: array
                    required:
                    - enabled
                    type: object
                  clusterIpv4CIDR:
                    description: The IP address range of the Kubernetes pods in this
                      cluster in CIDR notation (e.g. 10.96.0.0/14). Leave blank to
                      have one automatically chosen or specify a /14 block in 10.0.0.0/8.
                      This field will only work for routes-based clusters, where ip_allocation_policy
                      is not defined.
                    type: string
                  databaseEncryption:
                    description: 'Application-layer Secrets Encryption settings. The
                      object format is {state = string, key_name = string}. Valid
                      values of state are: "ENCRYPTED"; "DECRYPTED". key_name is the
                      name of a CloudKMS key.'
                    properties:
                      keyName:
                        description: The key to use to encrypt/decrypt secrets.
                        type: string
                      state:
                        description: ENCRYPTED or DECRYPTED.
                        type: string
                    required:
                    - state
                    type: object
                  datapathProvider:
                    description: The desired datapath provider for this cluster. By
                      default, uses the IPTables-based kube-proxy implementation.
                    type: string
                  defaultMaxPodsPerNode:
                    description: The default maximum number of pods per node in this
                      cluster. This doesn't work on "routes-based" clusters, clusters
                      that don't have IP Aliasing enabled.
                    format: int64
                    type: integer
                  defaultSnatStatus:
                    description: Whether the cluster disables default in-node sNAT
                      rules. In-node sNAT rules will be disabled when defaultSnatStatus
                      is disabled.
                    properties:
                      disabled:
                        description: When disabled is set to false, default IP masquerade
                          rules will be applied to the nodes to prevent sNAT on cluster
                          internal traffic.
                        type: boolean
                    required:
                    - disabled
                    type: object
                  description:
                    description: ' Description of the cluster.'
                    type: string
                  enableAutopilot:
                    description: Enable Autopilot for this cluster.
                    type: boolean
                  enableBinaryAuthorization:
                    description: Enable Binary Authorization for this cluster. If
                      enabled, all container images will be validated by Google Binary
                      Authorization.
                    type: boolean
                  enableIntranodeVisibility:
                    description: Whether Intra-node visibility is enabled for this
                      cluster. This makes same node pod to pod traffic visible for
                      VPC network.
                    type: boolean
                  enableKubernetesAlpha:
                    description: Whether to enable Kubernetes Alpha features for this
                      cluster. Note that when this option is enabled, the cluster
                      cannot be upgraded and will be automatically deleted after 30
                      days.
                    type: boolean
                  enableLegacyAbac:
                    description: Whether the ABAC authorizer is enabled for this cluster.
                      When enabled, identities in the system, including service accounts,
                      nodes, and controllers, will have statically granted permissions
                      beyond those provided by the RBAC configuration or IAM. Defaults
                      to false.
                    type: boolean
                  enableShieldedNodes:
                    description: Enable Shielded Nodes features on all nodes in this
                      cluster.
                    type: boolean
                  enableTpu:
                    description: Whether to enable Cloud TPU resources in this cluster.
                    type: boolean
                  endpoint:
                    description: The IP address of this cluster's Kubernetes master.
                    type: string
                  id:
                    type: string
                  initialNodeCount:
                    description: The number of nodes to create in this cluster's default
                      node pool. In regional or multi-zonal clusters, this is the
                      number of nodes per zone. Must be set if node_pool is not set.
                      If you're using google_container_node_pool objects with no default
                      node pool, you'll need to set this to a value of at least 1,
                      alongside setting remove_default_node_pool to true.
                    format: int64
                    type: integer
                  instanceGroupUrls:
                    description: List of instance group URLs which have been assigned
                      to the cluster.
                    items:
                      type: string
                    type: array
                  ipAllocationPolicy:
                    description: Configuration of cluster IP allocation for VPC-native
                      clusters. Adding this block enables IP aliasing, making the
                      cluster VPC-native instead of routes-based.
                    properties:
                      clusterIpv4CIDRBlock:
                        description: The IP address range for the cluster pod IPs.
                          Set to blank to have a range chosen with the default size.
                          Set to /netmask (e.g. /14) to have a range chosen with a
                          specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
                          from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12,
                          192.168.0.0/16) to pick a specific range to use.
                        type: string
                      clusterSecondaryRangeName:
                        description: The name of the existing secondary range in the
                          cluster's subnetwork to use for pod IP addresses. Alternatively,
                          cluster_ipv4_cidr_block can be used to automatically create
                          a GKE-managed one.
                        type: string
                      servicesIpv4CIDRBlock:
                        description: The IP address range of the services IPs in this
                          cluster. Set to blank to have a range chosen with the default
                          size. Set to /netmask (e.g. /14) to have a range chosen
                          with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
                          from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12,
                          192.168.0.0/16) to pick a specific range to use.
                        type: string
                      servicesSecondaryRangeName:
                        description: The name of the existing secondary range in the
                          cluster's subnetwork to use for service ClusterIPs. Alternatively,
                          services_ipv4_cidr_block can be used to automatically create
                          a GKE-managed one.
                        type: string
                    type: object
                  labelFingerprint:
                    description: The fingerprint of the set of labels for this cluster.
                    type: string
                  location:
                    description: The location (region or zone) in which the cluster
                      master will be created, as well as the default node location.
                      If you specify a zone (such as us-central1-a), the cluster will
                      be a zonal cluster with a single cluster master. If you specify
                      a region (such as us-west1), the cluster will be a regional
                      cluster with multiple masters spread across zones in the region,
                      and with default node locations in those zones as well.
                    type: string
                  loggingService:
                    description: The logging service that the cluster should write
                      logs to. Available options include logging.googleapis.com(Legacy
                      Stackdriver), logging.googleapis.com/kubernetes(Stackdriver
                      Kubernetes Engine Logging), and none. Defaults to logging.googleapis.com/kubernetes.
                    type: string
                  maintenancePolicy:
                    description: The maintenance policy to use for the cluster.
                    properties:
                      dailyMaintenanceWindow:
                        description: 'Time window specified for daily maintenance
                          operations. Specify start_time in RFC3339 format "HH:MM”,
                          where HH : [00-23] and MM : [00-59] GMT.'
                        properties:
                          duration:
                            type: string
                          startTime:
                            type: string
                        required:
                        - startTime
                        type: object
                      maintenanceExclusion:
                        description: Exceptions to maintenance window. Non-emergency
                          maintenance should not occur in these windows.
                        items:
                          properties:
                            endTime:
                              type: string
                            exclusionName:
                              type: string
                            startTime:
                              type: string
                          required:
                          - endTime
                          - exclusionName
                          - startTime
                          type: object
                        maxItems: 3
                        type: array
                      recurringWindow:
                        description: Time window for recurring maintenance operations.
                        properties:
                          endTime:
                            type: string
                          recurrence:
                            type: string
                          startTime:
                            type: string
                        required:
                        - endTime
                        - recurrence
                        - startTime
                        type: object
                    type: object
                  masterAuth:
                    description: The authentication information for accessing the
                      Kubernetes master. Some values in this block are only returned
                      by the API if your service account has permission to get credentials
                      for your GKE cluster. If you see an unexpected diff removing
                      a username/password or unsetting your client cert, ensure you
                      have the container.clusters.getCredentials permission.
                    properties:
                      clientCertificate:
                        description: Base64 encoded public certificate used by clients
                          to authenticate to the cluster endpoint.
                        type: string
                      clientCertificateConfig:
                        description: Whether client certificate authorization is enabled
                          for this cluster.
                        properties:
                          issueClientCertificate:
                            description: Whether client certificate authorization
                              is enabled for this cluster.
                            type: boolean
                        required:
                        - issueClientCertificate
                        type: object
                      clusterCaCertificate:
                        description: Base64 encoded public certificate that is the
                          root of trust for the cluster.
                        type: string
                      username:
                        description: The username to use for HTTP basic authentication
                          when accessing the Kubernetes master endpoint. If not present
                          basic auth will be disabled.
                        type: string
                    type: object
                  masterAuthorizedNetworksConfig:
                    description: The desired configuration options for master authorized
                      networks. Omit the nested cidr_blocks attribute to disallow
                      external access (except the cluster node IPs, which GKE automatically
                      whitelists).
                    properties:
                      cidrBlocks:
                        description: External networks that can access the Kubernetes
                          cluster master through HTTPS.
                        items:
                          properties:
                            cidrBlock:
                              description: External network that can access Kubernetes
                                master through HTTPS. Must be specified in CIDR notation.
                              type: string
                            displayName:
                              description: Field for users to identify CIDR blocks.
                              type: string
                          required:
                          - cidrBlock
                          type: object
                        type: array
                    type: object
                  masterVersion:
                    description: The current version of the master in the cluster.
                      This may be different than the min_master_version set in the
                      config if the master has been updated by GKE.
                    type: string
                  minMasterVersion:
                    description: The minimum version of the master. GKE will auto-update
                      the master to new versions, so this does not guarantee the current
                      master version--use the read-only master_version field to obtain
                      that. If unset, the cluster's version will be set by GKE to
                      the version of the most recent official release (which is not
                      necessarily the latest version).
                    type: string
                  monitoringService:
                    description: The monitoring service that the cluster should write
                      metrics to. Automatically send metrics from pods in the cluster
                      to the Google Cloud Monitoring API. VM metrics will be collected
                      by Google Compute Engine regardless of this setting Available
                      options include monitoring.googleapis.com(Legacy Stackdriver),
                      monitoring.googleapis.com/kubernetes(Stackdriver Kubernetes
                      Engine Monitoring), and none. Defaults to monitoring.googleapis.com/kubernetes.
                    type: string
                  name:
                    description: The name of the cluster, unique within the project
                      and location.
                    type: string
                  network:
                    description: The name or self_link of the Google Compute Engine
                      network to which the cluster is connected. For Shared VPC, set
                      this to the self link of the shared network.
                    type: string
                  networkPolicy:
                    description: Configuration options for the NetworkPolicy feature.
                    properties:
                      enabled:
                        description: Whether network policy is enabled on the cluster.
                        type: boolean
                      provider:
                        description: The selected network policy provider. Defaults
                          to PROVIDER_UNSPECIFIED.
                        type: string
                    required:
                    - enabled
                    type: object
                  networkingMode:
                    description: Determines whether alias IPs or routes will be used
                      for pod IPs in the cluster.
                    type: string
                  nodeConfig:
                    description: The configuration of the nodepool
                    properties:
                      diskSizeGb:
                        description: Size of the disk attached to each node, specified
                          in GB. The smallest allowed disk size is 10GB.
                        format: int64
                        type: integer
                      diskType:
                        description: Type of the disk attached to each node.
                        type: string
                      guestAccelerator:
                        description: List of the type and count of accelerator cards
                          attached to the instance.
                        items:
                          properties:
                            count:
                              description: The number of the accelerator cards exposed
                                to an instance.
                              format: int64
                              type: integer
                            type:
                              description: The accelerator type resource name.
                              type: string
                          required:
                          - count
                          - type
                          type: object
                        type: array
                      imageType:
                        description: The image type to use for this node. Note that
                          for a given image type, the latest version of it will be
                          used.
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: The map of Kubernetes labels (key/value pairs)
                          to be applied to each node. These will added in addition
                          to any default label(s) that Kubernetes may apply to the
                          node.
                        type: object
                      localSsdCount:
                        description: The number of local SSD disks to be attached
                          to the node.
                        format: int64
                        type: integer
                      machineType:
                        description: The name of a Google Compute Engine machine type.
                        type: string
                      metadata:
                        additionalProperties:
                          type: string
                        description: The metadata key/value pairs assigned to instances
                          in the cluster.
                        type: object
                      minCPUPlatform:
                        description: Minimum CPU platform to be used by this instance.
                          The instance may be scheduled on the specified or newer
                          CPU platform.
                        type: string
                      oauthScopes:
                        description: The set of Google API scopes to be made available
                          on all of the node VMs.
                        items:
                          type: string
                        type: array
                      preemptible:
                        description: Whether the nodes are created as preemptible
                          VM instances.
                        type: boolean
                      serviceAccount:
                        description: The Google Cloud Platform Service Account to
                          be used by the node VMs.
                        type: string
                      shieldedInstanceConfig:
                        description: Shielded Instance options.
                        properties:
                          enableIntegrityMonitoring:
                            description: Defines whether the instance has integrity
                              monitoring enabled.
                            type: boolean
                          enableSecureBoot:
                            description: Defines whether the instance has Secure Boot
                              enabled.
                            type: boolean
                        type: object
                      tags:
                        description: The list of instance tags applied to all nodes.
                        items:
                          type: string
                        type: array
                      taint:
                        description: List of Kubernetes taints to be applied to each
                          node.
                        items:
                          properties:
                            effect:
                              description: Effect for taint.
                              type: string
                            key:
                              description: Key for taint.
                              type: string
                            value:
                              description: Value for taint.
                              type: string
                          required:
                          - effect
                          - key
                          - value
                          type: object
                        type: array
                      workloadMetadataConfig:
                        description: The workload metadata configuration for this
                          node.
                        properties:
                          nodeMetadata:
                            description: NodeMetadata is the configuration for how
                              to expose metadata to the workloads running on the node.
                            type: string
                        required:
                        - nodeMetadata
                        type: object
                    type: object
                  nodeLocations:
                    description: The list of zones in which the cluster's nodes are
                      located. Nodes must be in the region of their regional cluster
                      or in the same region as their cluster's zone for zonal clusters.
                      If this is specified for a zonal cluster, omit the cluster's
                      zone.
                    items:
                      type: string
                    type: array
                  nodePool:
                    description: 'List of node pools associated with this cluster.
                      See google_container_node_pool for schema. Warning: node pools
                      defined inside a cluster can''t be changed (or added/removed)
                      after cluster creation without deleting and recreating the entire
                      cluster. Unless you absolutely need the ability to say "these
                      are the only node pools associated with this cluster", use the
                      google_container_node_pool resource instead of this property.'
                    items:
                      properties:
                        autoscaling:
                          description: Configuration required by cluster autoscaler
                            to adjust the size of the node pool to the current cluster
                            usage.
                          properties:
                            maxNodeCount:
                              description: Maximum number of nodes in the NodePool.
                                Must be >= min_node_count.
                              format: int64
                              type: integer
                            minNodeCount:
                              description: Minimum number of nodes in the NodePool.
                                Must be >=0 and <= max_node_count.
                              format: int64
                              type: integer
                          required:
                          - maxNodeCount
                          - minNodeCount
                          type: object
                        initialNodeCount:
                          description: The initial number of nodes for the pool. In
                            regional or multi-zonal clusters, this is the number of
                            nodes per zone. Changing this will force recreation of
                            the resource.
                          format: int64
                          type: integer
                        instanceGroupUrls:
                          description: The resource URLs of the managed instance groups
                            associated with this node pool.
                          items:
                            type: string
                          type: array
                        management:
                          description: Node management configuration, wherein auto-repair
                            and auto-upgrade is configured.
                          properties:
                            autoRepair:
                              description: Whether the nodes will be automatically
                                repaired.
                              type: boolean
                            autoUpgrade:
                              description: Whether the nodes will be automatically
                                upgraded.
                              type: boolean
                          type: object
                        maxPodsPerNode:
                          description: The maximum number of pods per node in this
                            node pool. Note that this does not work on node pools
                            which are "route-based" - that is, node pools belonging
                            to clusters that do not have IP Aliasing enabled.
                          format: int64
                          type: integer
                        name:
                          description: The name of the node pool. If left blank, Terraform
                            will auto-generate a unique name.
                          type: string
                        namePrefix:
                          description: Creates a unique name for the node pool beginning
                            with the specified prefix. Conflicts with name.
                          type: string
                        nodeConfig:
                          description: The configuration of the nodepool
                          properties:
                            diskSizeGb:
                              description: Size of the disk attached to each node,
                                specified in GB. The smallest allowed disk size is
                                10GB.
                              format: int64
                              type: integer
                            diskType:
                              description: Type of the disk attached to each node.
                              type: string
                            guestAccelerator:
                              description: List of the type and count of accelerator
                                cards attached to the instance.
                              items:
                                properties:
                                  count:
                                    description: The number of the accelerator cards
                                      exposed to an instance.
                                    format: int64
                                    type: integer
                                  type:
                                    description: The accelerator type resource name.
                                    type: string
                                required:
                                - count
                                - type
                                type: object
                              type: array
                            imageType:
                              description: The image type to use for this node. Note
                                that for a given image type, the latest version of
                                it will be used.
                              type: string
                            labels:
                              additionalProperties:
                                type: string
                              description: The map of Kubernetes labels (key/value
                                pairs) to be applied to each node. These will added
                                in addition to any default label(s) that Kubernetes
                                may apply to the node.
                              type: object
                            localSsdCount:
                              description: The number of local SSD disks to be attached
                                to the node.
                              format: int64
                              type: integer
                            machineType:
                              description: The name of a Google Compute Engine machine
                                type.
                              type: string
                            metadata:
                              additionalProperties:
                                type: string
                              description: The metadata key/value pairs assigned to
                                instances in the cluster.
                              type: object
                            minCPUPlatform:
                              description: Minimum CPU platform to be used by this
                                instance. The instance may be scheduled on the specified
                                or newer CPU platform.
                              type: string
                            oauthScopes:
                              description: The set of Google API scopes to be made
                                available on all of the node VMs.
                              items:
                                type: string
                              type: array
                            preemptible:
                              description: Whether the nodes are created as preemptible
                                VM instances.
                              type: boolean
                            serviceAccount:
                              description: The Google Cloud Platform Service Account
                                to be used by the node VMs.
                              type: string
                            shieldedInstanceConfig:
                              description: Shielded Instance options.
                              properties:
                                enableIntegrityMonitoring:
                                  description: Defines whether the instance has integrity
                                    monitoring enabled.
                                  type: boolean
                                enableSecureBoot:
                                  description: Defines whether the instance has Secure
                                    Boot enabled.
                                  type: boolean
                              type: object
                            tags:
                              description: The list of instance tags applied to all
                                nodes.
                              items:
                                type: string
                              type: array
                            taint:
                              description: List of Kubernetes taints to be applied
                                to each node.
                              items:
                                properties:
                                  effect:
                                    description: Effect for taint.
                                    type: string
                                  key:
                                    description: Key for taint.
                                    type: string
                                  value:
                                    description: Value for taint.
                                    type: string
                                required:
                                - effect
                                - key
                                - value
                                type: object
                              type: array
                            workloadMetadataConfig:
                              description: The workload metadata configuration for
                                this node.
                              properties:
                                nodeMetadata:
                                  description: NodeMetadata is the configuration for
                                    how to expose metadata to the workloads running
                                    on the node.
                                  type: string
                              required:
                              - nodeMetadata
                              type: object
                          type: object
                        nodeCount:
                          description: The number of nodes per instance group. This
                            field can be used to update the number of nodes per instance
                            group but should not be used alongside autoscaling.
                          format: int64
                          type: integer
                        nodeLocations:
                          description: The list of zones in which the node pool's
                            nodes should be located. Nodes must be in the region of
                            their regional cluster or in the same region as their
                            cluster's zone for zonal clusters. If unspecified, the
                            cluster-level node_locations will be used.
                          items:
                            type: string
                          type: array
                        upgradeSettings:
                          description: Specify node upgrade settings to change how
                            many nodes GKE attempts to upgrade at once. The number
                            of nodes upgraded simultaneously is the sum of max_surge
                            and max_unavailable. The maximum number of nodes upgraded
                            simultaneously is limited to 20.
                          properties:
                            maxSurge:
                              description: The number of additional nodes that can
                                be added to the node pool during an upgrade. Increasing
                                max_surge raises the number of nodes that can be upgraded
                                simultaneously. Can be set to 0 or greater.
                              format: int64
                              type: integer
                            maxUnavailable:
                              description: The number of nodes that can be simultaneously
                                unavailable during an upgrade. Increasing max_unavailable
                                raises the number of nodes that can be upgraded in
                                parallel. Can be set to 0 or greater.
                              format: int64
                              type: integer
                          required:
                          - maxSurge
                          - maxUnavailable
                          type: object
                        version:
                          description: The Kubernetes version for the nodes in this
                            pool. Note that if this field and auto_upgrade are both
                            specified, they will fight each other for what the node
                            version should be, so setting both is highly discouraged.
                            While a fuzzy version can be specified, it's recommended
                            that you specify explicit versions as Terraform will see
                            spurious diffs when fuzzy versions are used. See the google_container_engine_versions
                            data source's version_prefix field to approximate fuzzy
                            versions in a Terraform-compatible way.
                          type: string
                      type: object
                    type: array
                  nodeVersion:
                    description: The Kubernetes version on the nodes. Must either
                      be unset or set to the same value as min_master_version on create.
                      Defaults to the default version set by GKE which is not necessarily
                      the latest version. This only affects nodes in the default node
                      pool. While a fuzzy version can be specified, it's recommended
                      that you specify explicit versions as Terraform will see spurious
                      diffs when fuzzy versions are used. See the google_container_engine_versions
                      data source's version_prefix field to approximate fuzzy versions
                      in a Terraform-compatible way. To update nodes in other node
                      pools, use the version attribute on the node pool.
                    type: string
                  operation:
                    type: string
                  podSecurityPolicyConfig:
                    description: Configuration for the PodSecurityPolicy feature.
                    properties:
                      enabled:
                        description: Enable the PodSecurityPolicy controller for this
                          cluster. If enabled, pods must be valid under a PodSecurityPolicy
                          to be created.
                        type: boolean
                    required:
                    - enabled
                    type: object
                  privateClusterConfig:
                    description: Configuration for private clusters, clusters with
                      private nodes.
                    properties:
                      enablePrivateEndpoint:
                        description: Enables the private cluster feature, creating
                          a private endpoint on the cluster. In a private cluster,
                          nodes only have RFC 1918 private addresses and communicate
                          with the master's private endpoint via private networking.
                        type: boolean
                      enablePrivateNodes:
                        description: When true, the cluster's private endpoint is
                          used as the cluster endpoint and access through the public
                          endpoint is disabled. When false, either endpoint can be
                          used. This field only applies to private clusters, when
                          enable_private_nodes is true.
                        type: boolean
                      masterGlobalAccessConfig:
                        description: Controls cluster master global access settings.
                        properties:
                          enabled:
                            description: Whether the cluster master is accessible
                              globally or not.
                            type: boolean
                        required:
                        - enabled
                        type: object
                      masterIpv4CIDRBlock:
                        description: The IP range in CIDR notation to use for the
                          hosted master network. This range will be used for assigning
                          private IP addresses to the cluster master(s) and the ILB
                          VIP. This range must not overlap with any other ranges in
                          use within the cluster's network, and it must be a /28 subnet.
                          See Private Cluster Limitations for more details. This field
                          only applies to private clusters, when enable_private_nodes
                          is true.
                        type: string
                      peeringName:
                        description: The name of the peering between this cluster
                          and the Google owned VPC.
                        type: string
                      privateEndpoint:
                        description: The internal IP address of this cluster's master
                          endpoint.
                        type: string
                      publicEndpoint:
                        description: The external IP address of this cluster's master
                          endpoint.
                        type: string
                    required:
                    - enablePrivateEndpoint
                    type: object
                  privateIpv6GoogleAccess:
                    description: The desired state of IPv6 connectivity to Google
                      Services. By default, no private IPv6 access to or from Google
                      Services (all access will be via IPv4).
                    type: string
                  project:
                    description: The ID of the project in which the resource belongs.
                      If it is not provided, the provider project is used.
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  releaseChannel:
                    description: Configuration options for the Release channel feature,
                      which provide more control over automatic upgrades of your GKE
                      clusters. Note that removing this field from your config will
                      not unenroll it. Instead, use the "UNSPECIFIED" channel.
                    properties:
                      channel:
                        description: 'The selected release channel. Accepted values
                          are: * UNSPECIFIED: Not set. * RAPID: Weekly upgrade cadence;
                          Early testers and developers who requires new features.
                          * REGULAR: Multiple per month upgrade cadence; Production
                          users who need features not yet offered in the Stable channel.
                          * STABLE: Every few months upgrade cadence; Production users
                          who need stability above all else, and for whom frequent
                          upgrades are too risky.'
                        type: string
                    required:
                    - channel
                    type: object
                  removeDefaultNodePool:
                    description: If true, deletes the default node pool upon cluster
                      creation. If you're using google_container_node_pool resources
                      with no default node pool, this should be set to true, alongside
                      setting initial_node_count to at least 1.
                    type: boolean
                  resourceLabels:
                    additionalProperties:
                      type: string
                    description: The GCE resource labels (a map of key/value pairs)
                      to be applied to the cluster.
                    type: object
                  resourceUsageExportConfig:
                    description: Configuration for the ResourceUsageExportConfig feature.
                    properties:
                      bigqueryDestination:
                        description: Parameters for using BigQuery as the destination
                          of resource usage export.
                        properties:
                          datasetID:
                            description: The ID of a BigQuery Dataset.
                            type: string
                        required:
                        - datasetID
                        type: object
                      enableNetworkEgressMetering:
                        description: Whether to enable network egress metering for
                          this cluster. If enabled, a daemonset will be created in
                          the cluster to meter network egress traffic.
                        type: boolean
                      enableResourceConsumptionMetering:
                        description: Whether to enable resource consumption metering
                          on this cluster. When enabled, a table will be created in
                          the resource export BigQuery dataset to store resource consumption
                          data. The resulting table can be joined with the resource
                          usage table or with BigQuery billing export. Defaults to
                          true.
                        type: boolean
                    required:
                    - bigqueryDestination
                    type: object
                  secretRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  selfLink:
                    description: Server-defined URL for the resource.
                    type: string
                  servicesIpv4CIDR:
                    description: The IP address range of the Kubernetes services in
                      this cluster, in CIDR notation (e.g. 1.2.3.4/29). Service addresses
                      are typically put in the last /16 from the container CIDR.
                    type: string
                  subnetwork:
                    description: The name or self_link of the Google Compute Engine
                      subnetwork in which the cluster's instances are launched.
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  timeouts:
                    properties:
                      create:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      default:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      delete:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      read:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      update:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                    type: object
                  tpuIpv4CIDRBlock:
                    description: The IP address range of the Cloud TPUs in this cluster,
                      in CIDR notation (e.g. 1.2.3.4/29).
                    type: string
                  verticalPodAutoscaling:
                    description: Vertical Pod Autoscaling automatically adjusts the
                      resources of pods controlled by it.
                    properties:
                      enabled:
                        description: Enables vertical pod autoscaling.
                        type: boolean
                    required:
                    - enabled
                    type: object
                  workloadIdentityConfig:
                    description: Configuration for the use of Kubernetes Service Accounts
                      in GCP IAM policies.
                    properties:
                      identityNamespace:
                        description: Enables workload identity.
                        type: string
                    required:
                    - identityNamespace
                    type: object
                required:
                - name
                - providerRef
                type: object
              labelFingerprint:
                description: The fingerprint of the set of labels for this cluster.
                type: string
              location:
                description: The location (region or zone) in which the cluster master
                  will be created, as well as the default node location. If you specify
                  a zone (such as us-central1-a), the cluster will be a zonal cluster
                  with a single cluster master. If you specify a region (such as us-west1),
                  the cluster will be a regional cluster with multiple masters spread
                  across zones in the region, and with default node locations in those
                  zones as well.
                type: string
              loggingService:
                description: The logging service that the cluster should write logs
                  to. Available options include logging.googleapis.com(Legacy Stackdriver),
                  logging.googleapis.com/kubernetes(Stackdriver Kubernetes Engine
                  Logging), and none. Defaults to logging.googleapis.com/kubernetes.
                type: string
              maintenancePolicy:
                description: The maintenance policy to use for the cluster.
                properties:
                  dailyMaintenanceWindow:
                    description: 'Time window specified for daily maintenance operations.
                      Specify start_time in RFC3339 format "HH:MM”, where HH : [00-23]
                      and MM : [00-59] GMT.'
                    properties:
                      duration:
                        type: string
                      startTime:
                        type: string
                    required:
                    - startTime
                    type: object
                  maintenanceExclusion:
                    description: Exceptions to maintenance window. Non-emergency maintenance
                      should not occur in these windows.
                    items:
                      properties:
                        endTime:
                          type: string
                        exclusionName:
                          type: string
                        startTime:
                          type: string
                      required:
                      - endTime
                      - exclusionName
                      - startTime
                      type: object
                    maxItems: 3
                    type: array
                  recurringWindow:
                    description: Time window for recurring maintenance operations.
                    properties:
                      endTime:
                        type: string
                      recurrence:
                        type: string
                      startTime:
                        type: string
                    required:
                    - endTime
                    - recurrence
                    - startTime
                    type: object
                type: object
              masterAuth:
                description: The authentication information for accessing the Kubernetes
                  master. Some values in this block are only returned by the API if
                  your service account has permission to get credentials for your
                  GKE cluster. If you see an unexpected diff removing a username/password
                  or unsetting your client cert, ensure you have the container.clusters.getCredentials
                  permission.
                properties:
                  clientCertificate:
                    description: Base64 encoded public certificate used by clients
                      to authenticate to the cluster endpoint.
                    type: string
                  clientCertificateConfig:
                    description: Whether client certificate authorization is enabled
                      for this cluster.
                    properties:
                      issueClientCertificate:
                        description: Whether client certificate authorization is enabled
                          for this cluster.
                        type: boolean
                    required:
                    - issueClientCertificate
                    type: object
                  clusterCaCertificate:
                    description: Base64 encoded public certificate that is the root
                      of trust for the cluster.
                    type: string
                  username:
                    description: The username to use for HTTP basic authentication
                      when accessing the Kubernetes master endpoint. If not present
                      basic auth will be disabled.
                    type: string
                type: object
              masterAuthorizedNetworksConfig:
                description: The desired configuration options for master authorized
                  networks. Omit the nested cidr_blocks attribute to disallow external
                  access (except the cluster node IPs, which GKE automatically whitelists).
                properties:
                  cidrBlocks:
                    description: External networks that can access the Kubernetes
                      cluster master through HTTPS.
                    items:
                      properties:
                        cidrBlock:
                          description: External network that can access Kubernetes
                            master through HTTPS. Must be specified in CIDR notation.
                          type: string
                        displayName:
                          description: Field for users to identify CIDR blocks.
                          type: string
                      required:
                      - cidrBlock
                      type: object
                    type: array
                type: object
              masterVersion:
                description: The current version of the master in the cluster. This
                  may be different than the min_master_version set in the config if
                  the master has been updated by GKE.
                type: string
              minMasterVersion:
                description: The minimum version of the master. GKE will auto-update
                  the master to new versions, so this does not guarantee the current
                  master version--use the read-only master_version field to obtain
                  that. If unset, the cluster's version will be set by GKE to the
                  version of the most recent official release (which is not necessarily
                  the latest version).
                type: string
              monitoringService:
                description: The monitoring service that the cluster should write
                  metrics to. Automatically send metrics from pods in the cluster
                  to the Google Cloud Monitoring API. VM metrics will be collected
                  by Google Compute Engine regardless of this setting Available options
                  include monitoring.googleapis.com(Legacy Stackdriver), monitoring.googleapis.com/kubernetes(Stackdriver
                  Kubernetes Engine Monitoring), and none. Defaults to monitoring.googleapis.com/kubernetes.
                type: string
              name:
                description: The name of the cluster, unique within the project and
                  location.
                type: string
              network:
                description: The name or self_link of the Google Compute Engine network
                  to which the cluster is connected. For Shared VPC, set this to the
                  self link of the shared network.
                type: string
              networkPolicy:
                description: Configuration options for the NetworkPolicy feature.
                properties:
                  enabled:
                    description: Whether network policy is enabled on the cluster.
                    type: boolean
                  provider:
                    description: The selected network policy provider. Defaults to
                      PROVIDER_UNSPECIFIED.
                    type: string
                required:
                - enabled
                type: object
              networkingMode:
                description: Determines whether alias IPs or routes will be used for
                  pod IPs in the cluster.
                type: string
              nodeConfig:
                description: The configuration of the nodepool
                properties:
                  diskSizeGb:
                    description: Size of the disk attached to each node, specified
                      in GB. The smallest allowed disk size is 10GB.
                    format: int64
                    type: integer
                  diskType:
                    description: Type of the disk attached to each node.
                    type: string
                  guestAccelerator:
                    description: List of the type and count of accelerator cards attached
                      to the instance.
                    items:
                      properties:
                        count:
                          description: The number of the accelerator cards exposed
                            to an instance.
                          format: int64
                          type: integer
                        type:
                          description: The accelerator type resource name.
                          type: string
                      required:
                      - count
                      - type
                      type: object
                    type: array
                  imageType:
                    description: The image type to use for this node. Note that for
                      a given image type, the latest version of it will be used.
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: The map of Kubernetes labels (key/value pairs) to
                      be applied to each node. These will added in addition to any
                      default label(s) that Kubernetes may apply to the node.
                    type: object
                  localSsdCount:
                    description: The number of local SSD disks to be attached to the
                      node.
                    format: int64
                    type: integer
                  machineType:
                    description: The name of a Google Compute Engine machine type.
                    type: string
                  metadata:
                    additionalProperties:
                      type: string
                    description: The metadata key/value pairs assigned to instances
                      in the cluster.
                    type: object
                  minCPUPlatform:
                    description: Minimum CPU platform to be used by this instance.
                      The instance may be scheduled on the specified or newer CPU
                      platform.
                    type: string
                  oauthScopes:
                    description: The set of Google API scopes to be made available
                      on all of the node VMs.
                    items:
                      type: string
                    type: array
                  preemptible:
                    description: Whether the nodes are created as preemptible VM instances.
                    type: boolean
                  serviceAccount:
                    description: The Google Cloud Platform Service Account to be used
                      by the node VMs.
                    type: string
                  shieldedInstanceConfig:
                    description: Shielded Instance options.
                    properties:
                      enableIntegrityMonitoring:
                        description: Defines whether the instance has integrity monitoring
                          enabled.
                        type: boolean
                      enableSecureBoot:
                        description: Defines whether the instance has Secure Boot
                          enabled.
                        type: boolean
                    type: object
                  tags:
                    description: The list of instance tags applied to all nodes.
                    items:
                      type: string
                    type: array
                  taint:
                    description: List of Kubernetes taints to be applied to each node.
                    items:
                      properties:
                        effect:
                          description: Effect for taint.
                          type: string
                        key:
                          description: Key for taint.
                          type: string
                        value:
                          description: Value for taint.
                          type: string
                      required:
                      - effect
                      - key
                      - value
                      type: object
                    type: array
                  workloadMetadataConfig:
                    description: The workload metadata configuration for this node.
                    properties:
                      nodeMetadata:
                        description: NodeMetadata is the configuration for how to
                          expose metadata to the workloads running on the node.
                        type: string
                    required:
                    - nodeMetadata
                    type: object
                type: object
              nodeLocations:
                description: The list of zones in which the cluster's nodes are located.
                  Nodes must be in the region of their regional cluster or in the
                  same region as their cluster's zone for zonal clusters. If this
                  is specified for a zonal cluster, omit the cluster's zone.
                items:
                  type: string
                type: array
              nodePool:
                description: 'List of node pools associated with this cluster. See
                  google_container_node_pool for schema. Warning: node pools defined
                  inside a cluster can''t be changed (or added/removed) after cluster
                  creation without deleting and recreating the entire cluster. Unless
                  you absolutely need the ability to say "these are the only node
                  pools associated with this cluster", use the google_container_node_pool
                  resource instead of this property.'
                items:
                  properties:
                    autoscaling:
                      description: Configuration required by cluster autoscaler to
                        adjust the size of the node pool to the current cluster usage.
                      properties:
                        maxNodeCount:
                          description: Maximum number of nodes in the NodePool. Must
                            be >= min_node_count.
                          format: int64
                          type: integer
                        minNodeCount:
                          description: Minimum number of nodes in the NodePool. Must
                            be >=0 and <= max_node_count.
                          format: int64
                          type: integer
                      required:
                      - maxNodeCount
                      - minNodeCount
                      type: object
                    initialNodeCount:
                      description: The initial number of nodes for the pool. In regional
                        or multi-zonal clusters, this is the number of nodes per zone.
                        Changing this will force recreation of the resource.
                      format: int64
                      type: integer
                    instanceGroupUrls:
                      description: The resource URLs of the managed instance groups
                        associated with this node pool.
                      items:
                        type: string
                      type: array
                    management:
                      description: Node management configuration, wherein auto-repair
                        and auto-upgrade is configured.
                      properties:
                        autoRepair:
                          description: Whether the nodes will be automatically repaired.
                          type: boolean
                        autoUpgrade:
                          description: Whether the nodes will be automatically upgraded.
                          type: boolean
                      type: object
                    maxPodsPerNode:
                      description: The maximum number of pods per node in this node
                        pool. Note that this does not work on node pools which are
                        "route-based" - that is, node pools belonging to clusters
                        that do not have IP Aliasing enabled.
                      format: int64
                      type: integer
                    name:
                      description: The name of the node pool. If left blank, Terraform
                        will auto-generate a unique name.
                      type: string
                    namePrefix:
                      description: Creates a unique name for the node pool beginning
                        with the specified prefix. Conflicts with name.
                      type: string
                    nodeConfig:
                      description: The configuration of the nodepool
                      properties:
                        diskSizeGb:
                          description: Size of the disk attached to each node, specified
                            in GB. The smallest allowed disk size is 10GB.
                          format: int64
                          type: integer
                        diskType:
                          description: Type of the disk attached to each node.
                          type: string
                        guestAccelerator:
                          description: List of the type and count of accelerator cards
                            attached to the instance.
                          items:
                            properties:
                              count:
                                description: The number of the accelerator cards exposed
                                  to an instance.
                                format: int64
                                type: integer
                              type:
                                description: The accelerator type resource name.
                                type: string
                            required:
                            - count
                            - type
                            type: object
                          type: array
                        imageType:
                          description: The image type to use for this node. Note that
                            for a given image type, the latest version of it will
                            be used.
                          type: string
                        labels:
                          additionalProperties:
                            type: string
                          description: The map of Kubernetes labels (key/value pairs)
                            to be applied to each node. These will added in addition
                            to any default label(s) that Kubernetes may apply to the
                            node.
                          type: object
                        localSsdCount:
                          description: The number of local SSD disks to be attached
                            to the node.
                          format: int64
                          type: integer
                        machineType:
                          description: The name of a Google Compute Engine machine
                            type.
                          type: string
                        metadata:
                          additionalProperties:
                            type: string
                          description: The metadata key/value pairs assigned to instances
                            in the cluster.
                          type: object
                        minCPUPlatform:
                          description: Minimum CPU platform to be used by this instance.
                            The instance may be scheduled on the specified or newer
                            CPU platform.
                          type: string
                        oauthScopes:
                          description: The set of Google API scopes to be made available
                            on all of the node VMs.
                          items:
                            type: string
                          type: array
                        preemptible:
                          description: Whether the nodes are created as preemptible
                            VM instances.
                          type: boolean
                        serviceAccount:
                          description: The Google Cloud Platform Service Account to
                            be used by the node VMs.
                          type: string
                        shieldedInstanceConfig:
                          description: Shielded Instance options.
                          properties:
                            enableIntegrityMonitoring:
                              description: Defines whether the instance has integrity
                                monitoring enabled.
                              type: boolean
                            enableSecureBoot:
                              description: Defines whether the instance has Secure
                                Boot enabled.
                              type: boolean
                          type: object
                        tags:
                          description: The list of instance tags applied to all nodes.
                          items:
                            type: string
                          type: array
                        taint:
                          description: List of Kubernetes taints to be applied to
                            each node.
                          items:
                            properties:
                              effect:
                                description: Effect for taint.
                                type: string
                              key:
                                description: Key for taint.
                                type: string
                              value:
                                description: Value for taint.
                                type: string
                            required:
                            - effect
                            - key
                            - value
                            type: object
                          type: array
                        workloadMetadataConfig:
                          description: The workload metadata configuration for this
                            node.
                          properties:
                            nodeMetadata:
                              description: NodeMetadata is the configuration for how
                                to expose metadata to the workloads running on the
                                node.
                              type: string
                          required:
                          - nodeMetadata
                          type: object
                      type: object
                    nodeCount:
                      description: The number of nodes per instance group. This field
                        can be used to update the number of nodes per instance group
                        but should not be used alongside autoscaling.
                      format: int64
                      type: integer
                    nodeLocations:
                      description: The list of zones in which the node pool's nodes
                        should be located. Nodes must be in the region of their regional
                        cluster or in the same region as their cluster's zone for
                        zonal clusters. If unspecified, the cluster-level node_locations
                        will be used.
                      items:
                        type: string
                      type: array
                    upgradeSettings:
                      description: Specify node upgrade settings to change how many
                        nodes GKE attempts to upgrade at once. The number of nodes
                        upgraded simultaneously is the sum of max_surge and max_unavailable.
                        The maximum number of nodes upgraded simultaneously is limited
                        to 20.
                      properties:
                        maxSurge:
                          description: The number of additional nodes that can be
                            added to the node pool during an upgrade. Increasing max_surge
                            raises the number of nodes that can be upgraded simultaneously.
                            Can be set to 0 or greater.
                          format: int64
                          type: integer
                        maxUnavailable:
                          description: The number of nodes that can be simultaneously
                            unavailable during an upgrade. Increasing max_unavailable
                            raises the number of nodes that can be upgraded in parallel.
                            Can be set to 0 or greater.
                          format: int64
                          type: integer
                      required:
                      - maxSurge
                      - maxUnavailable
                      type: object
                    version:
                      description: The Kubernetes version for the nodes in this pool.
                        Note that if this field and auto_upgrade are both specified,
                        they will fight each other for what the node version should
                        be, so setting both is highly discouraged. While a fuzzy version
                        can be specified, it's recommended that you specify explicit
                        versions as Terraform will see spurious diffs when fuzzy versions
                        are used. See the google_container_engine_versions data source's
                        version_prefix field to approximate fuzzy versions in a Terraform-compatible
                        way.
                      type: string
                  type: object
                type: array
              nodeVersion:
                description: The Kubernetes version on the nodes. Must either be unset
                  or set to the same value as min_master_version on create. Defaults
                  to the default version set by GKE which is not necessarily the latest
                  version. This only affects nodes in the default node pool. While
                  a fuzzy version can be specified, it's recommended that you specify
                  explicit versions as Terraform will see spurious diffs when fuzzy
                  versions are used. See the google_container_engine_versions data
                  source's version_prefix field to approximate fuzzy versions in a
                  Terraform-compatible way. To update nodes in other node pools, use
                  the version attribute on the node pool.
                type: string
              operation:
                type: string
              podSecurityPolicyConfig:
                description: Configuration for the PodSecurityPolicy feature.
                properties:
                  enabled:
                    description: Enable the PodSecurityPolicy controller for this
                      cluster. If enabled, pods must be valid under a PodSecurityPolicy
                      to be created.
                    type: boolean
                required:
                - enabled
                type: object
              privateClusterConfig:
                description: Configuration for private clusters, clusters with private
                  nodes.
                properties:
                  enablePrivateEndpoint:
                    description: Enables the private cluster feature, creating a private
                      endpoint on the cluster. In a private cluster, nodes only have
                      RFC 1918 private addresses and communicate with the master's
                      private endpoint via private networking.
                    type: boolean
                  enablePrivateNodes:
                    description: When true, the cluster's private endpoint is used
                      as the cluster endpoint and access through the public endpoint
                      is disabled. When false, either endpoint can be used. This field
                      only applies to private clusters, when enable_private_nodes
                      is true.
                    type: boolean
                  masterGlobalAccessConfig:
                    description: Controls cluster master global access settings.
                    properties:
                      enabled:
                        description: Whether the cluster master is accessible globally
                          or not.
                        type: boolean
                    required:
                    - enabled
                    type: object
                  masterIpv4CIDRBlock:
                    description: The IP range in CIDR notation to use for the hosted
                      master network. This range will be used for assigning private
                      IP addresses to the cluster master(s) and the ILB VIP. This
                      range must not overlap with any other ranges in use within the
                      cluster's network, and it must be a /28 subnet. See Private
                      Cluster Limitations for more details. This field only applies
                      to private clusters, when enable_private_nodes is true.
                    type: string
                  peeringName:
                    description: The name of the peering between this cluster and
                      the Google owned VPC.
                    type: string
                  privateEndpoint:
                    description: The internal IP address of this cluster's master
                      endpoint.
                    type: string
                  publicEndpoint:
                    description: The external IP address of this cluster's master
                      endpoint.
                    type: string
                required:
                - enablePrivateEndpoint
                type: object
              privateIpv6GoogleAccess:
                description: The desired state of IPv6 connectivity to Google Services.
                  By default, no private IPv6 access to or from Google Services (all
                  access will be via IPv4).
                type: string
              project:
                description: The ID of the project in which the resource belongs.
                  If it is not provided, the provider project is used.
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              releaseChannel:
                description: Configuration options for the Release channel feature,
                  which provide more control over automatic upgrades of your GKE clusters.
                  Note that removing this field from your config will not unenroll
                  it. Instead, use the "UNSPECIFIED" channel.
                properties:
                  channel:
                    description: 'The selected release channel. Accepted values are:
                      * UNSPECIFIED: Not set. * RAPID: Weekly upgrade cadence; Early
                      testers and developers who requires new features. * REGULAR:
                      Multiple per month upgrade cadence; Production users who need
                      features not yet offered in the Stable channel. * STABLE: Every
                      few months upgrade cadence; Production users who need stability
                      above all else, and for whom frequent upgrades are too risky.'
                    type: string
                required:
                - channel
                type: object
              removeDefaultNodePool:
                description: If true, deletes the default node pool upon cluster creation.
                  If you're using google_container_node_pool resources with no default
                  node pool, this should be set to true, alongside setting initial_node_count
                  to at least 1.
                type: boolean
              resourceLabels:
                additionalProperties:
                  type: string
                description: The GCE resource labels (a map of key/value pairs) to
                  be applied to the cluster.
                type: object
              resourceUsageExportConfig:
                description: Configuration for the ResourceUsageExportConfig feature.
                properties:
                  bigqueryDestination:
                    description: Parameters for using BigQuery as the destination
                      of resource usage export.
                    properties:
                      datasetID:
                        description: The ID of a BigQuery Dataset.
                        type: string
                    required:
                    - datasetID
                    type: object
                  enableNetworkEgressMetering:
                    description: Whether to enable network egress metering for this
                      cluster. If enabled, a daemonset will be created in the cluster
                      to meter network egress traffic.
                    type: boolean
                  enableResourceConsumptionMetering:
                    description: Whether to enable resource consumption metering on
                      this cluster. When enabled, a table will be created in the resource
                      export BigQuery dataset to store resource consumption data.
                      The resulting table can be joined with the resource usage table
                      or with BigQuery billing export. Defaults to true.
                    type: boolean
                required:
                - bigqueryDestination
                type: object
              secretRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              selfLink:
                description: Server-defined URL for the resource.
                type: string
              servicesIpv4CIDR:
                description: The IP address range of the Kubernetes services in this
                  cluster, in CIDR notation (e.g. 1.2.3.4/29). Service addresses are
                  typically put in the last /16 from the container CIDR.
                type: string
              subnetwork:
                description: The name or self_link of the Google Compute Engine subnetwork
                  in which the cluster's instances are launched.
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              timeouts:
                properties:
                  create:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  default:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  delete:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  read:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  update:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                type: object
              tpuIpv4CIDRBlock:
                description: The IP address range of the Cloud TPUs in this cluster,
                  in CIDR notation (e.g. 1.2.3.4/29).
                type: string
              verticalPodAutoscaling:
                description: Vertical Pod Autoscaling automatically adjusts the resources
                  of pods controlled by it.
                properties:
                  enabled:
                    description: Enables vertical pod autoscaling.
                    type: boolean
                required:
                - enabled
                type: object
              workloadIdentityConfig:
                description: Configuration for the use of Kubernetes Service Accounts
                  in GCP IAM policies.
                properties:
                  identityNamespace:
                    description: Enables workload identity.
                    type: string
                required:
                - identityNamespace
                type: object
            required:
            - name
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: registries.container.google.kubeform.com
spec:
  group: container.google.kubeform.com
  names:
    kind: Registry
    listKind: RegistryList
    plural: registries
    singular: registry
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              bucketSelfLink:
                description: The URI of the created resource.
                type: string
              id:
                type: string
              kubeformOutput:
                properties:
                  bucketSelfLink:
                    description: The URI of the created resource.
                    type: string
                  id:
                    type: string
                  location:
                    description: The location of the registry. One of ASIA, EU, US
                      or not specified. See the official documentation for more information
                      on registry locations.
                    type: string
                  project:
                    description: The ID of the project in which the resource belongs.
                      If it is not provided, the provider project is used.
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - providerRef
                type: object
              location:
                description: The location of the registry. One of ASIA, EU, US or
                  not specified. See the official documentation for more information
                  on registry locations.
                type: string
              project:
                description: The ID of the project in which the resource belongs.
                  If it is not provided, the provider project is used.
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: metrics
  name: metricsconfigurations.metrics.appscode.com
spec:
  group: metrics.appscode.com
  names:
    categories:
    - metrics
    - appscode
    - all
    kind: MetricsConfiguration
    listKind: MetricsConfigurationList
    plural: metricsconfigurations
    singular: metricsconfiguration
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.targetRef.apiVersion
      name: APIVersion
      type: string
    - jsonPath: .spec.targetRef.kind
      name: Kind
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MetricsConfigurationSpec is the spec of MetricsConfiguration
              object.
            properties:
              metrics:
                description: List of Metrics configuration for the resource object
                  defined in TargetRef
                items:
                  description: Metrics contains the configuration of a metric in prometheus
                    style.
                  properties:
                    field:
                      description: Field defines the metric value path of the manifest
                        file and the type of that value
                      properties:
                        path:
                          description: 'Path defines the json path of the object.
                            Example: For deployment spec replica count, the path will
                            be .spec.replicas'
                          type: string
                        type:
                          description: Type defines the type of the value in the given
                            Path Type can be "Integer" for integer value like .spec.replicas,
                            "DateTime" for time stamp value like .metadata.creationTimestamp
                            "Array" for array field like .spec.containers "String"
                            for string field like .statue.phase (for pod status)
                          enum:
                          - Integer
                          - DateTime
                          - Array
                          - String
                          type: string
                      required:
                      - path
                      - type
                      type: object
                    help:
                      description: 'Help is used to describe the metrics. Example:
                        For kube_deployment_spec_replicas, help string can be "Number
                        of desired pods for a deployment."'
                      type: string
                    labels:
                      description: Labels defines the metric labels as a key-value
                        pair
                      items:
                        description: "Label contains the information of a metric label.
                          Given labels are always added in the metrics along with
                          resource name and namespace. Resource's name and namespace
                          are always added in the labels by default. No configuration
                          is needed for name and namespace labels. \n Example: kube_pod_info{pod=\"<pod_name>\",
                          namespace=\"<pod_namespace>\", host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\",
                          node=\"kind-control-plane\"}  1 In the example pod, namespace,
                          host_ip, pod_ip, node are labels. pod(resource name) and
                          namespace are default labels. No configurations is needed
                          for those. \n To generate others labels, config should be
                          given in the following way \n labels:   - key: host_ip     valuePath:
                          .status.hostIP   - key: pod_ip     valuePath: .status.podIP
                          \  - key: node     valuePath: .spec.nodeName \n Either Value
                          or ValuePath must be specified for a Label. If both is specified,
                          ValuePath is ignored. Note that if a valuePath doesn't exist
                          for a label key, the label will be ignored."
                        properties:
                          key:
                            description: Key defines the label key
                            type: string
                          value:
                            description: 'Value defines the hard coded label value.
                              Example: labels:   - key: unit     value: byte   - key:
                              environment     value: production'
                            type: string
                          valuePath:
                            description: 'ValuePath defines the label value path.
                              Example: To add deployment''s resource version as labels,
                              labels:   - key: version     valuePath: .metadata.resourceVersion'
                            type: string
                        required:
                        - key
                        type: object
                      type: array
                    metricValue:
                      description: "MetricValue defines the configuration to obtain
                        metric value. \n Metrics must contain either States or MetricValue.
                        If both are specified, MetricValue will be ignored."
                      properties:
                        value:
                          description: "Value contains the metric value. It is always
                            equal to 1. It is defined when some information of the
                            object is collected as labels but there is no specific
                            metric value. \n Example: For metrics \"kube_pod_info\",
                            there are some information like host_ip, pod_ip, node
                            name is collected as labels. As there must be a metric
                            value, metric value is kept as 1. The metric will look
                            like `kube_pod_info{host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\",
                            node=\"kind-control-plane\" .....}  1`"
                          format: double
                          type: number
                        valueFromExpression:
                          description: "ValueFromExpression contains an expression
                            for the metric value expression can be a function as well.
                            Parameters is used in the expression string \n Available
                            expression evaluation functions are: \n toInt() returns
                            1 if the expression is true otherwise 0, example: toInt(phase
                            == 'Running') \n evaluatePercentage(a, b) returns the
                            value of (a * b%) example: evaluatePercentage(replicas,
                            maxUnavailable) \n calculateCPU() returns the cpu in unit
                            core example: calculateCPU(cpu), for cpu value 150m, it
                            will return 0.15 \n calculateMemory() returns the memory
                            size in byte example: calculateMemory(memory), for memory
                            value 1 ki, it will return 1024 \n toUnix() returns the
                            DateTime string into unix format. example: toUnix(dateTime)
                            will return the corresponding unix value for the given
                            dateTime \n in above examples phase, replicas, maxUnavailable,
                            cpu, memory, dateTime are Parameter's key those values
                            will come from corresponding Parameter's value"
                          type: string
                        valueFromPath:
                          description: "ValueFromPath contains the field path of the
                            manifest file of a object. ValueFromPath is used when
                            the metric value is coming from any specific json path
                            of the object. \n Example: For metrics \"kube_deployment_spec_replicas\",
                            the metricValue is coming from a specific path .spec.replicas
                            In this case, valueFromPath: .spec.replicas Some example
                            of json path: .metadata.observedGeneration, .spec.restartPolicy,
                            .status.startTime \n Some example of json path which is
                            coming from an element of an array: .spec.containers[*].image,
                            .status.containerStatuses[*].restartCount"
                          type: string
                      type: object
                    name:
                      description: 'Name defines the metrics name. Name should be
                        in snake case. Example: kube_deployment_spec_replicas'
                      type: string
                    params:
                      description: Params is list of parameters configuration used
                        in expression evaluation
                      items:
                        description: Parameter contains the information of a parameter
                          used in expression evaluation Parameter should contain an
                          user defined key and corresponding Value or ValuePath. Either
                          Value or ValuePath must be specified. If both are specified,
                          ValuePath is ignored.
                        properties:
                          key:
                            description: Key defines the parameter's key
                            type: string
                          value:
                            description: Value defines user defined parameter's value.
                            type: string
                          valuePath:
                            description: 'ValuePath defines the manifest field path
                              for the parameter''s value. Example: To add deployment''s
                              spec replica count as parameter, params:   - key: replica     valuePath:
                              .spec.replicas'
                            type: string
                        required:
                        - key
                        type: object
                      type: array
                    states:
                      description: "States handle metrics with label cardinality.
                        States specify the possible states for a label and their corresponding
                        MetricValue configuration. \n Metrics must contain either
                        States or MetricValue. If both are specified, MetricValue
                        will be ignored."
                      properties:
                        labelKey:
                          description: 'LabelKey defines an user defined label key
                            of the label which label cardinality is greater than one.
                            Example: For metric "kube_pod_status_phase", the LabelKey
                            can be "phase"'
                          type: string
                        values:
                          description: 'Values contains the list of state values.
                            The size of the list is always equal to the cardinality
                            of that label. Example: "kube_pod_statue_phase" metric
                            has a label "phase" which cardinality is equal to 5. So
                            Values should have StateValues config for all of them.'
                          items:
                            description: StateValues contains the information of a
                              state value. StateValues is used to define state with
                              all possible label values and corresponding MetricValue.
                            properties:
                              labelValue:
                                description: 'LabelValue defines the value of the
                                  label. Example: For labelKey "phase" (metric: kube_pod_status_phase
                                  path: .status.phase ) label value can be "Running",
                                  "Succeeded", "Failed", "Unknown" and "Pending"'
                                type: string
                              metricValue:
                                description: MetricValue defines the configuration
                                  of the metric value for the corresponding LabelValue
                                properties:
                                  value:
                                    description: "Value contains the metric value.
                                      It is always equal to 1. It is defined when
                                      some information of the object is collected
                                      as labels but there is no specific metric value.
                                      \n Example: For metrics \"kube_pod_info\", there
                                      are some information like host_ip, pod_ip, node
                                      name is collected as labels. As there must be
                                      a metric value, metric value is kept as 1. The
                                      metric will look like `kube_pod_info{host_ip=\"172.18.0.2\",
                                      pod_ip=\"10.244.0.14\", node=\"kind-control-plane\"
                                      .....}  1`"
                                    format: double
                                    type: number
                                  valueFromExpression:
                                    description: "ValueFromExpression contains an
                                      expression for the metric value expression can
                                      be a function as well. Parameters is used in
                                      the expression string \n Available expression
                                      evaluation functions are: \n toInt() returns
                                      1 if the expression is true otherwise 0, example:
                                      toInt(phase == 'Running') \n evaluatePercentage(a,
                                      b) returns the value of (a * b%) example: evaluatePercentage(replicas,
                                      maxUnavailable) \n calculateCPU() returns the
                                      cpu in unit core example: calculateCPU(cpu),
                                      for cpu value 150m, it will return 0.15 \n calculateMemory()
                                      returns the memory size in byte example: calculateMemory(memory),
                                      for memory value 1 ki, it will return 1024 \n
                                      toUnix() returns the DateTime string into unix
                                      format. example: toUnix(dateTime) will return
                                      the corresponding unix value for the given dateTime
                                      \n in above examples phase, replicas, maxUnavailable,
                                      cpu, memory, dateTime are Parameter's key those
                                      values will come from corresponding Parameter's
                                      value"
                                    type: string
                                  valueFromPath:
                                    description: "ValueFromPath contains the field
                                      path of the manifest file of a object. ValueFromPath
                                      is used when the metric value is coming from
                                      any specific json path of the object. \n Example:
                                      For metrics \"kube_deployment_spec_replicas\",
                                      the metricValue is coming from a specific path
                                      .spec.replicas In this case, valueFromPath:
                                      .spec.replicas Some example of json path: .metadata.observedGeneration,
                                      .spec.restartPolicy, .status.startTime \n Some
                                      example of json path which is coming from an
                                      element of an array: .spec.containers[*].image,
                                      .status.containerStatuses[*].restartCount"
                                    type: string
                                type: object
                            required:
                            - labelValue
                            - metricValue
                            type: object
                          type: array
                      required:
                      - labelKey
                      - values
                      type: object
                    type:
                      description: Type defines the metrics type. For kubernetes based
                        object, types can only be "gauge"
                      enum:
                      - gauge
                      type: string
                  required:
                  - help
                  - name
                  - type
                  type: object
                type: array
              targetRef:
                description: TargetRef defines the object for which metrics will be
                  collected
                properties:
                  apiVersion:
                    description: APIVersion defines the versioned schema of this representation
                      of an object.
                    type: string
                  kind:
                    description: Kind is a string value representing the REST resource
                      this object represents. In CamelCase.
                    type: string
                required:
                - apiVersion
                - kind
                type: object
            required:
            - metrics
            - targetRef
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
