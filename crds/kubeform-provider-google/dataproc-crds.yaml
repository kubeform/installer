apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: autoscalingpolicies.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: AutoscalingPolicy
    listKind: AutoscalingPolicyList
    plural: autoscalingpolicies
    singular: autoscalingpolicy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              basicAlgorithm:
                description: Basic algorithm for autoscaling.
                properties:
                  cooldownPeriod:
                    description: "Duration between scaling events. A scaling period
                      starts after the update operation from the previous event has
                      completed. \n Bounds: [2m, 1d]. Default: 2m."
                    type: string
                  yarnConfig:
                    description: YARN autoscaling configuration.
                    properties:
                      gracefulDecommissionTimeout:
                        description: "Timeout for YARN graceful decommissioning of
                          Node Managers. Specifies the duration to wait for jobs to
                          complete before forcefully removing workers (and potentially
                          interrupting jobs). Only applicable to downscaling operations.
                          \n Bounds: [0s, 1d]."
                        type: string
                      scaleDownFactor:
                        description: "Fraction of average pending memory in the last
                          cooldown period for which to remove workers. A scale-down
                          factor of 1 will result in scaling down so that there is
                          no available memory remaining after the update (more aggressive
                          scaling). A scale-down factor of 0 disables removing workers,
                          which can be beneficial for autoscaling a single job. \n
                          Bounds: [0.0, 1.0]."
                        format: double
                        type: number
                      scaleDownMinWorkerFraction:
                        description: "Minimum scale-down threshold as a fraction of
                          total cluster size before scaling occurs. For example, in
                          a 20-worker cluster, a threshold of 0.1 means the autoscaler
                          must recommend at least a 2 worker scale-down for the cluster
                          to scale. A threshold of 0 means the autoscaler will scale
                          down on any recommended change. \n Bounds: [0.0, 1.0]. Default:
                          0.0."
                        format: double
                        type: number
                      scaleUpFactor:
                        description: "Fraction of average pending memory in the last
                          cooldown period for which to add workers. A scale-up factor
                          of 1.0 will result in scaling up so that there is no pending
                          memory remaining after the update (more aggressive scaling).
                          A scale-up factor closer to 0 will result in a smaller magnitude
                          of scaling up (less aggressive scaling). \n Bounds: [0.0,
                          1.0]."
                        format: double
                        type: number
                      scaleUpMinWorkerFraction:
                        description: "Minimum scale-up threshold as a fraction of
                          total cluster size before scaling occurs. For example, in
                          a 20-worker cluster, a threshold of 0.1 means the autoscaler
                          must recommend at least a 2-worker scale-up for the cluster
                          to scale. A threshold of 0 means the autoscaler will scale
                          up on any recommended change. \n Bounds: [0.0, 1.0]. Default:
                          0.0."
                        format: double
                        type: number
                    required:
                    - gracefulDecommissionTimeout
                    - scaleDownFactor
                    - scaleUpFactor
                    type: object
                required:
                - yarnConfig
                type: object
              id:
                type: string
              kubeformOutput:
                properties:
                  basicAlgorithm:
                    description: Basic algorithm for autoscaling.
                    properties:
                      cooldownPeriod:
                        description: "Duration between scaling events. A scaling period
                          starts after the update operation from the previous event
                          has completed. \n Bounds: [2m, 1d]. Default: 2m."
                        type: string
                      yarnConfig:
                        description: YARN autoscaling configuration.
                        properties:
                          gracefulDecommissionTimeout:
                            description: "Timeout for YARN graceful decommissioning
                              of Node Managers. Specifies the duration to wait for
                              jobs to complete before forcefully removing workers
                              (and potentially interrupting jobs). Only applicable
                              to downscaling operations. \n Bounds: [0s, 1d]."
                            type: string
                          scaleDownFactor:
                            description: "Fraction of average pending memory in the
                              last cooldown period for which to remove workers. A
                              scale-down factor of 1 will result in scaling down so
                              that there is no available memory remaining after the
                              update (more aggressive scaling). A scale-down factor
                              of 0 disables removing workers, which can be beneficial
                              for autoscaling a single job. \n Bounds: [0.0, 1.0]."
                            format: double
                            type: number
                          scaleDownMinWorkerFraction:
                            description: "Minimum scale-down threshold as a fraction
                              of total cluster size before scaling occurs. For example,
                              in a 20-worker cluster, a threshold of 0.1 means the
                              autoscaler must recommend at least a 2 worker scale-down
                              for the cluster to scale. A threshold of 0 means the
                              autoscaler will scale down on any recommended change.
                              \n Bounds: [0.0, 1.0]. Default: 0.0."
                            format: double
                            type: number
                          scaleUpFactor:
                            description: "Fraction of average pending memory in the
                              last cooldown period for which to add workers. A scale-up
                              factor of 1.0 will result in scaling up so that there
                              is no pending memory remaining after the update (more
                              aggressive scaling). A scale-up factor closer to 0 will
                              result in a smaller magnitude of scaling up (less aggressive
                              scaling). \n Bounds: [0.0, 1.0]."
                            format: double
                            type: number
                          scaleUpMinWorkerFraction:
                            description: "Minimum scale-up threshold as a fraction
                              of total cluster size before scaling occurs. For example,
                              in a 20-worker cluster, a threshold of 0.1 means the
                              autoscaler must recommend at least a 2-worker scale-up
                              for the cluster to scale. A threshold of 0 means the
                              autoscaler will scale up on any recommended change.
                              \n Bounds: [0.0, 1.0]. Default: 0.0."
                            format: double
                            type: number
                        required:
                        - gracefulDecommissionTimeout
                        - scaleDownFactor
                        - scaleUpFactor
                        type: object
                    required:
                    - yarnConfig
                    type: object
                  id:
                    type: string
                  location:
                    description: The  location where the autoscaling policy should
                      reside. The default value is 'global'.
                    type: string
                  name:
                    description: The "resource name" of the autoscaling policy.
                    type: string
                  policyID:
                    description: The policy id. The id must contain only letters (a-z,
                      A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot
                      begin or end with underscore or hyphen. Must consist of between
                      3 and 50 characters.
                    type: string
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  secondaryWorkerConfig:
                    description: Describes how the autoscaler will operate for secondary
                      workers.
                    properties:
                      maxInstances:
                        description: 'Maximum number of instances for this group.
                          Note that by default, clusters will not use secondary workers.
                          Required for secondary workers if the minimum secondary
                          instances is set. Bounds: [minInstances, ). Defaults to
                          0.'
                        format: int64
                        type: integer
                      minInstances:
                        description: 'Minimum number of instances for this group.
                          Bounds: [0, maxInstances]. Defaults to 0.'
                        format: int64
                        type: integer
                      weight:
                        description: "Weight for the instance group, which is used
                          to determine the fraction of total workers in the cluster
                          from this instance group. For example, if primary workers
                          have weight 2, and secondary workers have weight 1, the
                          cluster will have approximately 2 primary workers for each
                          secondary worker. \n The cluster may not reach the specified
                          balance if constrained by min/max bounds or other autoscaling
                          settings. For example, if maxInstances for secondary workers
                          is 0, then only primary workers will be added. The cluster
                          can also be out of balance when created. \n If weight is
                          not set on any instance group, the cluster will default
                          to equal weight for all groups: the cluster will attempt
                          to maintain an equal number of workers in each group within
                          the configured size bounds for each group. If weight is
                          set for one group only, the cluster will default to zero
                          weight on the unset group. For example if weight is set
                          only on primary workers, the cluster will use primary workers
                          only and no secondary workers."
                        format: int64
                        type: integer
                    type: object
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  timeouts:
                    properties:
                      create:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      default:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      delete:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      read:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      update:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                    type: object
                  workerConfig:
                    description: Describes how the autoscaler will operate for primary
                      workers.
                    properties:
                      maxInstances:
                        description: Maximum number of instances for this group.
                        format: int64
                        type: integer
                      minInstances:
                        description: 'Minimum number of instances for this group.
                          Bounds: [2, maxInstances]. Defaults to 2.'
                        format: int64
                        type: integer
                      weight:
                        description: "Weight for the instance group, which is used
                          to determine the fraction of total workers in the cluster
                          from this instance group. For example, if primary workers
                          have weight 2, and secondary workers have weight 1, the
                          cluster will have approximately 2 primary workers for each
                          secondary worker. \n The cluster may not reach the specified
                          balance if constrained by min/max bounds or other autoscaling
                          settings. For example, if maxInstances for secondary workers
                          is 0, then only primary workers will be added. The cluster
                          can also be out of balance when created. \n If weight is
                          not set on any instance group, the cluster will default
                          to equal weight for all groups: the cluster will attempt
                          to maintain an equal number of workers in each group within
                          the configured size bounds for each group. If weight is
                          set for one group only, the cluster will default to zero
                          weight on the unset group. For example if weight is set
                          only on primary workers, the cluster will use primary workers
                          only and no secondary workers."
                        format: int64
                        type: integer
                    required:
                    - maxInstances
                    type: object
                required:
                - policyID
                - providerRef
                type: object
              location:
                description: The  location where the autoscaling policy should reside.
                  The default value is 'global'.
                type: string
              name:
                description: The "resource name" of the autoscaling policy.
                type: string
              policyID:
                description: The policy id. The id must contain only letters (a-z,
                  A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin
                  or end with underscore or hyphen. Must consist of between 3 and
                  50 characters.
                type: string
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              secondaryWorkerConfig:
                description: Describes how the autoscaler will operate for secondary
                  workers.
                properties:
                  maxInstances:
                    description: 'Maximum number of instances for this group. Note
                      that by default, clusters will not use secondary workers. Required
                      for secondary workers if the minimum secondary instances is
                      set. Bounds: [minInstances, ). Defaults to 0.'
                    format: int64
                    type: integer
                  minInstances:
                    description: 'Minimum number of instances for this group. Bounds:
                      [0, maxInstances]. Defaults to 0.'
                    format: int64
                    type: integer
                  weight:
                    description: "Weight for the instance group, which is used to
                      determine the fraction of total workers in the cluster from
                      this instance group. For example, if primary workers have weight
                      2, and secondary workers have weight 1, the cluster will have
                      approximately 2 primary workers for each secondary worker. \n
                      The cluster may not reach the specified balance if constrained
                      by min/max bounds or other autoscaling settings. For example,
                      if maxInstances for secondary workers is 0, then only primary
                      workers will be added. The cluster can also be out of balance
                      when created. \n If weight is not set on any instance group,
                      the cluster will default to equal weight for all groups: the
                      cluster will attempt to maintain an equal number of workers
                      in each group within the configured size bounds for each group.
                      If weight is set for one group only, the cluster will default
                      to zero weight on the unset group. For example if weight is
                      set only on primary workers, the cluster will use primary workers
                      only and no secondary workers."
                    format: int64
                    type: integer
                type: object
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              timeouts:
                properties:
                  create:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  default:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  delete:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  read:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  update:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                type: object
              workerConfig:
                description: Describes how the autoscaler will operate for primary
                  workers.
                properties:
                  maxInstances:
                    description: Maximum number of instances for this group.
                    format: int64
                    type: integer
                  minInstances:
                    description: 'Minimum number of instances for this group. Bounds:
                      [2, maxInstances]. Defaults to 2.'
                    format: int64
                    type: integer
                  weight:
                    description: "Weight for the instance group, which is used to
                      determine the fraction of total workers in the cluster from
                      this instance group. For example, if primary workers have weight
                      2, and secondary workers have weight 1, the cluster will have
                      approximately 2 primary workers for each secondary worker. \n
                      The cluster may not reach the specified balance if constrained
                      by min/max bounds or other autoscaling settings. For example,
                      if maxInstances for secondary workers is 0, then only primary
                      workers will be added. The cluster can also be out of balance
                      when created. \n If weight is not set on any instance group,
                      the cluster will default to equal weight for all groups: the
                      cluster will attempt to maintain an equal number of workers
                      in each group within the configured size bounds for each group.
                      If weight is set for one group only, the cluster will default
                      to zero weight on the unset group. For example if weight is
                      set only on primary workers, the cluster will use primary workers
                      only and no secondary workers."
                    format: int64
                    type: integer
                required:
                - maxInstances
                type: object
            required:
            - policyID
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: clusteriampolicies.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: ClusterIamPolicy
    listKind: ClusterIamPolicyList
    plural: clusteriampolicies
    singular: clusteriampolicy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              cluster:
                type: string
              etag:
                type: string
              id:
                type: string
              kubeformOutput:
                properties:
                  cluster:
                    type: string
                  etag:
                    type: string
                  id:
                    type: string
                  policyData:
                    type: string
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - cluster
                - policyData
                - providerRef
                type: object
              policyData:
                type: string
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - cluster
            - policyData
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: clusters.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              clusterConfig:
                description: Allows you to configure various aspects of the cluster.
                properties:
                  autoscalingConfig:
                    description: The autoscaling policy config associated with the
                      cluster.
                    properties:
                      policyURI:
                        description: The autoscaling policy used by the cluster.
                        type: string
                    required:
                    - policyURI
                    type: object
                  bucket:
                    description: ' The name of the cloud storage bucket ultimately
                      used to house the staging data for the cluster. If staging_bucket
                      is specified, it will contain this value, otherwise it will
                      be the auto generated name.'
                    type: string
                  encryptionConfig:
                    description: The Customer managed encryption keys settings for
                      the cluster.
                    properties:
                      kmsKeyName:
                        description: The Cloud KMS key name to use for PD disk encryption
                          for all instances in the cluster.
                        type: string
                    required:
                    - kmsKeyName
                    type: object
                  gceClusterConfig:
                    description: Common config settings for resources of Google Compute
                      Engine cluster instances, applicable to all instances in the
                      cluster.
                    properties:
                      internalIPOnly:
                        description: 'By default, clusters are not restricted to internal
                          IP addresses, and will have ephemeral external IP addresses
                          assigned to each instance. If set to true, all instances
                          in the cluster will only have internal IP addresses. Note:
                          Private Google Access (also known as privateIpGoogleAccess)
                          must be enabled on the subnetwork that the cluster will
                          be launched in.'
                        type: boolean
                      metadata:
                        additionalProperties:
                          type: string
                        description: A map of the Compute Engine metadata entries
                          to add to all instances
                        type: object
                      network:
                        description: The name or self_link of the Google Compute Engine
                          network to the cluster will be part of. Conflicts with subnetwork.
                          If neither is specified, this defaults to the "default"
                          network.
                        type: string
                      serviceAccount:
                        description: The service account to be used by the Node VMs.
                          If not specified, the "default" service account is used.
                        type: string
                      serviceAccountScopes:
                        description: The set of Google API scopes to be made available
                          on all of the node VMs under the service_account specified.
                          These can be either FQDNs, or scope aliases.
                        items:
                          type: string
                        type: array
                      subnetwork:
                        description: The name or self_link of the Google Compute Engine
                          subnetwork the cluster will be part of. Conflicts with network.
                        type: string
                      tags:
                        description: The list of instance tags applied to instances
                          in the cluster. Tags are used to identify valid sources
                          or targets for network firewalls.
                        items:
                          type: string
                        type: array
                      zone:
                        description: 'The GCP zone where your data is stored and used
                          (i.e. where the master and the worker nodes will be created
                          in). If region is set to ''global'' (default) then zone
                          is mandatory, otherwise GCP is able to make use of Auto
                          Zone Placement to determine this automatically for you.
                          Note: This setting additionally determines and restricts
                          which computing resources are available for use with other
                          configs such as cluster_config.master_config.machine_type
                          and cluster_config.worker_config.machine_type.'
                        type: string
                    type: object
                  initializationAction:
                    description: Commands to execute on each node after config is
                      completed. You can specify multiple versions of these.
                    items:
                      properties:
                        script:
                          description: The script to be executed during initialization
                            of the cluster. The script must be a GCS file with a gs://
                            prefix.
                          type: string
                        timeoutSec:
                          description: The maximum duration (in seconds) which script
                            is allowed to take to execute its action. GCP will default
                            to a predetermined computed value if not set (currently
                            300).
                          format: int64
                          type: integer
                      required:
                      - script
                      type: object
                    type: array
                  masterConfig:
                    description: The Google Compute Engine config settings for the
                      master/worker instances in a cluster.
                    properties:
                      accelerators:
                        description: The Compute Engine accelerator (GPU) configuration
                          for these instances. Can be specified multiple times.
                        items:
                          properties:
                            acceleratorCount:
                              description: The number of the accelerator cards of
                                this type exposed to this instance. Often restricted
                                to one of 1, 2, 4, or 8.
                              format: int64
                              type: integer
                            acceleratorType:
                              description: The short name of the accelerator type
                                to expose to this instance. For example, nvidia-tesla-k80.
                              type: string
                          required:
                          - acceleratorCount
                          - acceleratorType
                          type: object
                        type: array
                      diskConfig:
                        description: Disk Config
                        properties:
                          bootDiskSizeGb:
                            description: 'Size of the primary disk attached to each
                              node, specified in GB. The primary disk contains the
                              boot volume and system libraries, and the smallest allowed
                              disk size is 10GB. GCP will default to a predetermined
                              computed value if not set (currently 500GB). Note: If
                              SSDs are not attached, it also contains the HDFS data
                              blocks and Hadoop working directories.'
                            format: int64
                            type: integer
                          bootDiskType:
                            description: The disk type of the primary disk attached
                              to each node. One of "pd-ssd" or "pd-standard". Defaults
                              to "pd-standard".
                            type: string
                          numLocalSsds:
                            description: The amount of local SSD disks that will be
                              attached to each master cluster node. Defaults to 0.
                            format: int64
                            type: integer
                        type: object
                      imageURI:
                        description: The URI for the image to use for this master/worker
                        type: string
                      instanceNames:
                        description: List of master/worker instance names which have
                          been assigned to the cluster.
                        items:
                          type: string
                        type: array
                      machineType:
                        description: The name of a Google Compute Engine machine type
                          to create for the master/worker
                        type: string
                      minCPUPlatform:
                        description: The name of a minimum generation of CPU family
                          for the master/worker. If not specified, GCP will default
                          to a predetermined computed value for each zone.
                        type: string
                      numInstances:
                        description: Specifies the number of master/worker nodes to
                          create. If not specified, GCP will default to a predetermined
                          computed value.
                        format: int64
                        type: integer
                    type: object
                  preemptibleWorkerConfig:
                    description: The Google Compute Engine config settings for the
                      additional (aka preemptible) instances in a cluster.
                    properties:
                      diskConfig:
                        description: Disk Config
                        properties:
                          bootDiskSizeGb:
                            description: 'Size of the primary disk attached to each
                              preemptible worker node, specified in GB. The smallest
                              allowed disk size is 10GB. GCP will default to a predetermined
                              computed value if not set (currently 500GB). Note: If
                              SSDs are not attached, it also contains the HDFS data
                              blocks and Hadoop working directories.'
                            format: int64
                            type: integer
                          bootDiskType:
                            description: The disk type of the primary disk attached
                              to each preemptible worker node. One of "pd-ssd" or
                              "pd-standard". Defaults to "pd-standard".
                            type: string
                          numLocalSsds:
                            description: The amount of local SSD disks that will be
                              attached to each preemptible worker node. Defaults to
                              0.
                            format: int64
                            type: integer
                        type: object
                      instanceNames:
                        description: List of preemptible instance names which have
                          been assigned to the cluster.
                        items:
                          type: string
                        type: array
                      numInstances:
                        description: Specifies the number of preemptible nodes to
                          create. Defaults to 0.
                        format: int64
                        type: integer
                    type: object
                  securityConfig:
                    description: Security related configuration.
                    properties:
                      kerberosConfig:
                        description: Kerberos related configuration
                        properties:
                          crossRealmTrustAdminServer:
                            description: The admin server (IP or hostname) for the
                              remote trusted realm in a cross realm trust relationship.
                            type: string
                          crossRealmTrustKdc:
                            description: The KDC (IP or hostname) for the remote trusted
                              realm in a cross realm trust relationship.
                            type: string
                          crossRealmTrustRealm:
                            description: The remote realm the Dataproc on-cluster
                              KDC will trust, should the user enable cross realm trust.
                            type: string
                          crossRealmTrustSharedPasswordURI:
                            description: The Cloud Storage URI of a KMS encrypted
                              file containing the shared password between the on-cluster
                              Kerberos realm and the remote trusted realm, in a cross
                              realm trust relationship.
                            type: string
                          enableKerberos:
                            description: Flag to indicate whether to Kerberize the
                              cluster.
                            type: boolean
                          kdcDbKeyURI:
                            description: The Cloud Storage URI of a KMS encrypted
                              file containing the master key of the KDC database.
                            type: string
                          keyPasswordURI:
                            description: The Cloud Storage URI of a KMS encrypted
                              file containing the password to the user provided key.
                              For the self-signed certificate, this password is generated
                              by Dataproc.
                            type: string
                          keystorePasswordURI:
                            description: The Cloud Storage URI of a KMS encrypted
                              file containing the password to the user provided keystore.
                              For the self-signed certificate, this password is generated
                              by Dataproc
                            type: string
                          keystoreURI:
                            description: The Cloud Storage URI of the keystore file
                              used for SSL encryption. If not provided, Dataproc will
                              provide a self-signed certificate.
                            type: string
                          kmsKeyURI:
                            description: The uri of the KMS key used to encrypt various
                              sensitive files.
                            type: string
                          realm:
                            description: The name of the on-cluster Kerberos realm.
                              If not specified, the uppercased domain of hostnames
                              will be the realm.
                            type: string
                          rootPrincipalPasswordURI:
                            description: The cloud Storage URI of a KMS encrypted
                              file containing the root principal password.
                            type: string
                          tgtLifetimeHours:
                            description: The lifetime of the ticket granting ticket,
                              in hours.
                            format: int64
                            type: integer
                          truststorePasswordURI:
                            description: The Cloud Storage URI of a KMS encrypted
                              file containing the password to the user provided truststore.
                              For the self-signed certificate, this password is generated
                              by Dataproc.
                            type: string
                          truststoreURI:
                            description: The Cloud Storage URI of the truststore file
                              used for SSL encryption. If not provided, Dataproc will
                              provide a self-signed certificate.
                            type: string
                        required:
                        - kmsKeyURI
                        - rootPrincipalPasswordURI
                        type: object
                    required:
                    - kerberosConfig
                    type: object
                  softwareConfig:
                    description: The config settings for software inside the cluster.
                    properties:
                      imageVersion:
                        description: The Cloud Dataproc image version to use for the
                          cluster - this controls the sets of software versions installed
                          onto the nodes when you create clusters. If not specified,
                          defaults to the latest version.
                        type: string
                      optionalComponents:
                        description: The set of optional components to activate on
                          the cluster.
                        items:
                          type: string
                        type: array
                      overrideProperties:
                        additionalProperties:
                          type: string
                        description: A list of override and additional properties
                          (key/value pairs) used to modify various aspects of the
                          common configuration files used when creating a cluster.
                        type: object
                      properties:
                        additionalProperties:
                          type: string
                        description: A list of the properties used to set the daemon
                          config files. This will include any values supplied by the
                          user via cluster_config.software_config.override_properties
                        type: object
                    type: object
                  stagingBucket:
                    description: 'The Cloud Storage staging bucket used to stage files,
                      such as Hadoop jars, between client machines and the cluster.
                      Note: If you don''t explicitly specify a staging_bucket then
                      GCP will auto create / assign one for you. However, you are
                      not guaranteed an auto generated bucket which is solely dedicated
                      to your cluster; it may be shared with other clusters in the
                      same region/zone also choosing to use the auto generation option.'
                    type: string
                  tempBucket:
                    description: 'The Cloud Storage temp bucket used to store ephemeral
                      cluster and jobs data, such as Spark and MapReduce history files.
                      Note: If you don''t explicitly specify a temp_bucket then GCP
                      will auto create / assign one for you.'
                    type: string
                  workerConfig:
                    description: The Google Compute Engine config settings for the
                      master/worker instances in a cluster.
                    properties:
                      accelerators:
                        description: The Compute Engine accelerator (GPU) configuration
                          for these instances. Can be specified multiple times.
                        items:
                          properties:
                            acceleratorCount:
                              description: The number of the accelerator cards of
                                this type exposed to this instance. Often restricted
                                to one of 1, 2, 4, or 8.
                              format: int64
                              type: integer
                            acceleratorType:
                              description: The short name of the accelerator type
                                to expose to this instance. For example, nvidia-tesla-k80.
                              type: string
                          required:
                          - acceleratorCount
                          - acceleratorType
                          type: object
                        type: array
                      diskConfig:
                        description: Disk Config
                        properties:
                          bootDiskSizeGb:
                            description: 'Size of the primary disk attached to each
                              node, specified in GB. The primary disk contains the
                              boot volume and system libraries, and the smallest allowed
                              disk size is 10GB. GCP will default to a predetermined
                              computed value if not set (currently 500GB). Note: If
                              SSDs are not attached, it also contains the HDFS data
                              blocks and Hadoop working directories.'
                            format: int64
                            type: integer
                          bootDiskType:
                            description: The disk type of the primary disk attached
                              to each node. One of "pd-ssd" or "pd-standard". Defaults
                              to "pd-standard".
                            type: string
                          numLocalSsds:
                            description: The amount of local SSD disks that will be
                              attached to each master cluster node. Defaults to 0.
                            format: int64
                            type: integer
                        type: object
                      imageURI:
                        description: The URI for the image to use for this master/worker
                        type: string
                      instanceNames:
                        description: List of master/worker instance names which have
                          been assigned to the cluster.
                        items:
                          type: string
                        type: array
                      machineType:
                        description: The name of a Google Compute Engine machine type
                          to create for the master/worker
                        type: string
                      minCPUPlatform:
                        description: The name of a minimum generation of CPU family
                          for the master/worker. If not specified, GCP will default
                          to a predetermined computed value for each zone.
                        type: string
                      numInstances:
                        description: Specifies the number of master/worker nodes to
                          create. If not specified, GCP will default to a predetermined
                          computed value.
                        format: int64
                        type: integer
                    type: object
                type: object
              gracefulDecommissionTimeout:
                description: The timeout duration which allows graceful decomissioning
                  when you change the number of worker nodes directly through a terraform
                  apply
                type: string
              id:
                type: string
              kubeformOutput:
                properties:
                  clusterConfig:
                    description: Allows you to configure various aspects of the cluster.
                    properties:
                      autoscalingConfig:
                        description: The autoscaling policy config associated with
                          the cluster.
                        properties:
                          policyURI:
                            description: The autoscaling policy used by the cluster.
                            type: string
                        required:
                        - policyURI
                        type: object
                      bucket:
                        description: ' The name of the cloud storage bucket ultimately
                          used to house the staging data for the cluster. If staging_bucket
                          is specified, it will contain this value, otherwise it will
                          be the auto generated name.'
                        type: string
                      encryptionConfig:
                        description: The Customer managed encryption keys settings
                          for the cluster.
                        properties:
                          kmsKeyName:
                            description: The Cloud KMS key name to use for PD disk
                              encryption for all instances in the cluster.
                            type: string
                        required:
                        - kmsKeyName
                        type: object
                      gceClusterConfig:
                        description: Common config settings for resources of Google
                          Compute Engine cluster instances, applicable to all instances
                          in the cluster.
                        properties:
                          internalIPOnly:
                            description: 'By default, clusters are not restricted
                              to internal IP addresses, and will have ephemeral external
                              IP addresses assigned to each instance. If set to true,
                              all instances in the cluster will only have internal
                              IP addresses. Note: Private Google Access (also known
                              as privateIpGoogleAccess) must be enabled on the subnetwork
                              that the cluster will be launched in.'
                            type: boolean
                          metadata:
                            additionalProperties:
                              type: string
                            description: A map of the Compute Engine metadata entries
                              to add to all instances
                            type: object
                          network:
                            description: The name or self_link of the Google Compute
                              Engine network to the cluster will be part of. Conflicts
                              with subnetwork. If neither is specified, this defaults
                              to the "default" network.
                            type: string
                          serviceAccount:
                            description: The service account to be used by the Node
                              VMs. If not specified, the "default" service account
                              is used.
                            type: string
                          serviceAccountScopes:
                            description: The set of Google API scopes to be made available
                              on all of the node VMs under the service_account specified.
                              These can be either FQDNs, or scope aliases.
                            items:
                              type: string
                            type: array
                          subnetwork:
                            description: The name or self_link of the Google Compute
                              Engine subnetwork the cluster will be part of. Conflicts
                              with network.
                            type: string
                          tags:
                            description: The list of instance tags applied to instances
                              in the cluster. Tags are used to identify valid sources
                              or targets for network firewalls.
                            items:
                              type: string
                            type: array
                          zone:
                            description: 'The GCP zone where your data is stored and
                              used (i.e. where the master and the worker nodes will
                              be created in). If region is set to ''global'' (default)
                              then zone is mandatory, otherwise GCP is able to make
                              use of Auto Zone Placement to determine this automatically
                              for you. Note: This setting additionally determines
                              and restricts which computing resources are available
                              for use with other configs such as cluster_config.master_config.machine_type
                              and cluster_config.worker_config.machine_type.'
                            type: string
                        type: object
                      initializationAction:
                        description: Commands to execute on each node after config
                          is completed. You can specify multiple versions of these.
                        items:
                          properties:
                            script:
                              description: The script to be executed during initialization
                                of the cluster. The script must be a GCS file with
                                a gs:// prefix.
                              type: string
                            timeoutSec:
                              description: The maximum duration (in seconds) which
                                script is allowed to take to execute its action. GCP
                                will default to a predetermined computed value if
                                not set (currently 300).
                              format: int64
                              type: integer
                          required:
                          - script
                          type: object
                        type: array
                      masterConfig:
                        description: The Google Compute Engine config settings for
                          the master/worker instances in a cluster.
                        properties:
                          accelerators:
                            description: The Compute Engine accelerator (GPU) configuration
                              for these instances. Can be specified multiple times.
                            items:
                              properties:
                                acceleratorCount:
                                  description: The number of the accelerator cards
                                    of this type exposed to this instance. Often restricted
                                    to one of 1, 2, 4, or 8.
                                  format: int64
                                  type: integer
                                acceleratorType:
                                  description: The short name of the accelerator type
                                    to expose to this instance. For example, nvidia-tesla-k80.
                                  type: string
                              required:
                              - acceleratorCount
                              - acceleratorType
                              type: object
                            type: array
                          diskConfig:
                            description: Disk Config
                            properties:
                              bootDiskSizeGb:
                                description: 'Size of the primary disk attached to
                                  each node, specified in GB. The primary disk contains
                                  the boot volume and system libraries, and the smallest
                                  allowed disk size is 10GB. GCP will default to a
                                  predetermined computed value if not set (currently
                                  500GB). Note: If SSDs are not attached, it also
                                  contains the HDFS data blocks and Hadoop working
                                  directories.'
                                format: int64
                                type: integer
                              bootDiskType:
                                description: The disk type of the primary disk attached
                                  to each node. One of "pd-ssd" or "pd-standard".
                                  Defaults to "pd-standard".
                                type: string
                              numLocalSsds:
                                description: The amount of local SSD disks that will
                                  be attached to each master cluster node. Defaults
                                  to 0.
                                format: int64
                                type: integer
                            type: object
                          imageURI:
                            description: The URI for the image to use for this master/worker
                            type: string
                          instanceNames:
                            description: List of master/worker instance names which
                              have been assigned to the cluster.
                            items:
                              type: string
                            type: array
                          machineType:
                            description: The name of a Google Compute Engine machine
                              type to create for the master/worker
                            type: string
                          minCPUPlatform:
                            description: The name of a minimum generation of CPU family
                              for the master/worker. If not specified, GCP will default
                              to a predetermined computed value for each zone.
                            type: string
                          numInstances:
                            description: Specifies the number of master/worker nodes
                              to create. If not specified, GCP will default to a predetermined
                              computed value.
                            format: int64
                            type: integer
                        type: object
                      preemptibleWorkerConfig:
                        description: The Google Compute Engine config settings for
                          the additional (aka preemptible) instances in a cluster.
                        properties:
                          diskConfig:
                            description: Disk Config
                            properties:
                              bootDiskSizeGb:
                                description: 'Size of the primary disk attached to
                                  each preemptible worker node, specified in GB. The
                                  smallest allowed disk size is 10GB. GCP will default
                                  to a predetermined computed value if not set (currently
                                  500GB). Note: If SSDs are not attached, it also
                                  contains the HDFS data blocks and Hadoop working
                                  directories.'
                                format: int64
                                type: integer
                              bootDiskType:
                                description: The disk type of the primary disk attached
                                  to each preemptible worker node. One of "pd-ssd"
                                  or "pd-standard". Defaults to "pd-standard".
                                type: string
                              numLocalSsds:
                                description: The amount of local SSD disks that will
                                  be attached to each preemptible worker node. Defaults
                                  to 0.
                                format: int64
                                type: integer
                            type: object
                          instanceNames:
                            description: List of preemptible instance names which
                              have been assigned to the cluster.
                            items:
                              type: string
                            type: array
                          numInstances:
                            description: Specifies the number of preemptible nodes
                              to create. Defaults to 0.
                            format: int64
                            type: integer
                        type: object
                      securityConfig:
                        description: Security related configuration.
                        properties:
                          kerberosConfig:
                            description: Kerberos related configuration
                            properties:
                              crossRealmTrustAdminServer:
                                description: The admin server (IP or hostname) for
                                  the remote trusted realm in a cross realm trust
                                  relationship.
                                type: string
                              crossRealmTrustKdc:
                                description: The KDC (IP or hostname) for the remote
                                  trusted realm in a cross realm trust relationship.
                                type: string
                              crossRealmTrustRealm:
                                description: The remote realm the Dataproc on-cluster
                                  KDC will trust, should the user enable cross realm
                                  trust.
                                type: string
                              crossRealmTrustSharedPasswordURI:
                                description: The Cloud Storage URI of a KMS encrypted
                                  file containing the shared password between the
                                  on-cluster Kerberos realm and the remote trusted
                                  realm, in a cross realm trust relationship.
                                type: string
                              enableKerberos:
                                description: Flag to indicate whether to Kerberize
                                  the cluster.
                                type: boolean
                              kdcDbKeyURI:
                                description: The Cloud Storage URI of a KMS encrypted
                                  file containing the master key of the KDC database.
                                type: string
                              keyPasswordURI:
                                description: The Cloud Storage URI of a KMS encrypted
                                  file containing the password to the user provided
                                  key. For the self-signed certificate, this password
                                  is generated by Dataproc.
                                type: string
                              keystorePasswordURI:
                                description: The Cloud Storage URI of a KMS encrypted
                                  file containing the password to the user provided
                                  keystore. For the self-signed certificate, this
                                  password is generated by Dataproc
                                type: string
                              keystoreURI:
                                description: The Cloud Storage URI of the keystore
                                  file used for SSL encryption. If not provided, Dataproc
                                  will provide a self-signed certificate.
                                type: string
                              kmsKeyURI:
                                description: The uri of the KMS key used to encrypt
                                  various sensitive files.
                                type: string
                              realm:
                                description: The name of the on-cluster Kerberos realm.
                                  If not specified, the uppercased domain of hostnames
                                  will be the realm.
                                type: string
                              rootPrincipalPasswordURI:
                                description: The cloud Storage URI of a KMS encrypted
                                  file containing the root principal password.
                                type: string
                              tgtLifetimeHours:
                                description: The lifetime of the ticket granting ticket,
                                  in hours.
                                format: int64
                                type: integer
                              truststorePasswordURI:
                                description: The Cloud Storage URI of a KMS encrypted
                                  file containing the password to the user provided
                                  truststore. For the self-signed certificate, this
                                  password is generated by Dataproc.
                                type: string
                              truststoreURI:
                                description: The Cloud Storage URI of the truststore
                                  file used for SSL encryption. If not provided, Dataproc
                                  will provide a self-signed certificate.
                                type: string
                            required:
                            - kmsKeyURI
                            - rootPrincipalPasswordURI
                            type: object
                        required:
                        - kerberosConfig
                        type: object
                      softwareConfig:
                        description: The config settings for software inside the cluster.
                        properties:
                          imageVersion:
                            description: The Cloud Dataproc image version to use for
                              the cluster - this controls the sets of software versions
                              installed onto the nodes when you create clusters. If
                              not specified, defaults to the latest version.
                            type: string
                          optionalComponents:
                            description: The set of optional components to activate
                              on the cluster.
                            items:
                              type: string
                            type: array
                          overrideProperties:
                            additionalProperties:
                              type: string
                            description: A list of override and additional properties
                              (key/value pairs) used to modify various aspects of
                              the common configuration files used when creating a
                              cluster.
                            type: object
                          properties:
                            additionalProperties:
                              type: string
                            description: A list of the properties used to set the
                              daemon config files. This will include any values supplied
                              by the user via cluster_config.software_config.override_properties
                            type: object
                        type: object
                      stagingBucket:
                        description: 'The Cloud Storage staging bucket used to stage
                          files, such as Hadoop jars, between client machines and
                          the cluster. Note: If you don''t explicitly specify a staging_bucket
                          then GCP will auto create / assign one for you. However,
                          you are not guaranteed an auto generated bucket which is
                          solely dedicated to your cluster; it may be shared with
                          other clusters in the same region/zone also choosing to
                          use the auto generation option.'
                        type: string
                      tempBucket:
                        description: 'The Cloud Storage temp bucket used to store
                          ephemeral cluster and jobs data, such as Spark and MapReduce
                          history files. Note: If you don''t explicitly specify a
                          temp_bucket then GCP will auto create / assign one for you.'
                        type: string
                      workerConfig:
                        description: The Google Compute Engine config settings for
                          the master/worker instances in a cluster.
                        properties:
                          accelerators:
                            description: The Compute Engine accelerator (GPU) configuration
                              for these instances. Can be specified multiple times.
                            items:
                              properties:
                                acceleratorCount:
                                  description: The number of the accelerator cards
                                    of this type exposed to this instance. Often restricted
                                    to one of 1, 2, 4, or 8.
                                  format: int64
                                  type: integer
                                acceleratorType:
                                  description: The short name of the accelerator type
                                    to expose to this instance. For example, nvidia-tesla-k80.
                                  type: string
                              required:
                              - acceleratorCount
                              - acceleratorType
                              type: object
                            type: array
                          diskConfig:
                            description: Disk Config
                            properties:
                              bootDiskSizeGb:
                                description: 'Size of the primary disk attached to
                                  each node, specified in GB. The primary disk contains
                                  the boot volume and system libraries, and the smallest
                                  allowed disk size is 10GB. GCP will default to a
                                  predetermined computed value if not set (currently
                                  500GB). Note: If SSDs are not attached, it also
                                  contains the HDFS data blocks and Hadoop working
                                  directories.'
                                format: int64
                                type: integer
                              bootDiskType:
                                description: The disk type of the primary disk attached
                                  to each node. One of "pd-ssd" or "pd-standard".
                                  Defaults to "pd-standard".
                                type: string
                              numLocalSsds:
                                description: The amount of local SSD disks that will
                                  be attached to each master cluster node. Defaults
                                  to 0.
                                format: int64
                                type: integer
                            type: object
                          imageURI:
                            description: The URI for the image to use for this master/worker
                            type: string
                          instanceNames:
                            description: List of master/worker instance names which
                              have been assigned to the cluster.
                            items:
                              type: string
                            type: array
                          machineType:
                            description: The name of a Google Compute Engine machine
                              type to create for the master/worker
                            type: string
                          minCPUPlatform:
                            description: The name of a minimum generation of CPU family
                              for the master/worker. If not specified, GCP will default
                              to a predetermined computed value for each zone.
                            type: string
                          numInstances:
                            description: Specifies the number of master/worker nodes
                              to create. If not specified, GCP will default to a predetermined
                              computed value.
                            format: int64
                            type: integer
                        type: object
                    type: object
                  gracefulDecommissionTimeout:
                    description: The timeout duration which allows graceful decomissioning
                      when you change the number of worker nodes directly through
                      a terraform apply
                    type: string
                  id:
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: The list of labels (key/value pairs) to be applied
                      to instances in the cluster. GCP generates some itself including
                      goog-dataproc-cluster-name which is the name of the cluster.
                    type: object
                  name:
                    description: The name of the cluster, unique within the project
                      and zone.
                    type: string
                  project:
                    description: The ID of the project in which the cluster will exist.
                      If it is not provided, the provider project is used.
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    description: The region in which the cluster and associated nodes
                      will be created in. Defaults to global.
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  timeouts:
                    properties:
                      create:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      default:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      delete:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      read:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      update:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                    type: object
                required:
                - name
                - providerRef
                type: object
              labels:
                additionalProperties:
                  type: string
                description: The list of labels (key/value pairs) to be applied to
                  instances in the cluster. GCP generates some itself including goog-dataproc-cluster-name
                  which is the name of the cluster.
                type: object
              name:
                description: The name of the cluster, unique within the project and
                  zone.
                type: string
              project:
                description: The ID of the project in which the cluster will exist.
                  If it is not provided, the provider project is used.
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                description: The region in which the cluster and associated nodes
                  will be created in. Defaults to global.
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              timeouts:
                properties:
                  create:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  default:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  delete:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  read:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  update:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                type: object
            required:
            - name
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: jobiambindings.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: JobIamBinding
    listKind: JobIamBindingList
    plural: jobiambindings
    singular: jobiambinding
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              condition:
                properties:
                  description:
                    type: string
                  expression:
                    type: string
                  title:
                    type: string
                required:
                - expression
                - title
                type: object
              etag:
                type: string
              id:
                type: string
              jobID:
                type: string
              kubeformOutput:
                properties:
                  condition:
                    properties:
                      description:
                        type: string
                      expression:
                        type: string
                      title:
                        type: string
                    required:
                    - expression
                    - title
                    type: object
                  etag:
                    type: string
                  id:
                    type: string
                  jobID:
                    type: string
                  members:
                    items:
                      type: string
                    type: array
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    type: string
                  role:
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - jobID
                - members
                - providerRef
                - role
                type: object
              members:
                items:
                  type: string
                type: array
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                type: string
              role:
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - jobID
            - members
            - providerRef
            - role
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: clusteriambindings.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: ClusterIamBinding
    listKind: ClusterIamBindingList
    plural: clusteriambindings
    singular: clusteriambinding
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              cluster:
                type: string
              condition:
                properties:
                  description:
                    type: string
                  expression:
                    type: string
                  title:
                    type: string
                required:
                - expression
                - title
                type: object
              etag:
                type: string
              id:
                type: string
              kubeformOutput:
                properties:
                  cluster:
                    type: string
                  condition:
                    properties:
                      description:
                        type: string
                      expression:
                        type: string
                      title:
                        type: string
                    required:
                    - expression
                    - title
                    type: object
                  etag:
                    type: string
                  id:
                    type: string
                  members:
                    items:
                      type: string
                    type: array
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    type: string
                  role:
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - cluster
                - members
                - providerRef
                - role
                type: object
              members:
                items:
                  type: string
                type: array
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                type: string
              role:
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - cluster
            - members
            - providerRef
            - role
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: clusteriammembers.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: ClusterIamMember
    listKind: ClusterIamMemberList
    plural: clusteriammembers
    singular: clusteriammember
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              cluster:
                type: string
              condition:
                properties:
                  description:
                    type: string
                  expression:
                    type: string
                  title:
                    type: string
                required:
                - expression
                - title
                type: object
              etag:
                type: string
              id:
                type: string
              kubeformOutput:
                properties:
                  cluster:
                    type: string
                  condition:
                    properties:
                      description:
                        type: string
                      expression:
                        type: string
                      title:
                        type: string
                    required:
                    - expression
                    - title
                    type: object
                  etag:
                    type: string
                  id:
                    type: string
                  member:
                    type: string
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    type: string
                  role:
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - cluster
                - member
                - providerRef
                - role
                type: object
              member:
                type: string
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                type: string
              role:
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - cluster
            - member
            - providerRef
            - role
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: jobs.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: Job
    listKind: JobList
    plural: jobs
    singular: job
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              driverControlsFilesURI:
                description: Output-only. If present, the location of miscellaneous
                  control files which may be used as part of job setup and handling.
                  If not present, control files may be placed in the same location
                  as driver_output_uri.
                type: string
              driverOutputResourceURI:
                description: Output-only. A URI pointing to the location of the stdout
                  of the job's driver program
                type: string
              forceDelete:
                description: By default, you can only delete inactive jobs within
                  Dataproc. Setting this to true, and calling destroy, will ensure
                  that the job is first cancelled before issuing the delete.
                type: boolean
              hadoopConfig:
                description: The config of Hadoop job
                properties:
                  archiveUris:
                    description: HCFS URIs of archives to be extracted in the working
                      directory of .jar, .tar, .tar.gz, .tgz, and .zip.
                    items:
                      type: string
                    type: array
                  args:
                    description: The arguments to pass to the driver.
                    items:
                      type: string
                    type: array
                  fileUris:
                    description: HCFS URIs of files to be copied to the working directory
                      of Spark drivers and distributed tasks. Useful for naively parallel
                      tasks.
                    items:
                      type: string
                    type: array
                  jarFileUris:
                    description: HCFS URIs of jar files to add to the CLASSPATHs of
                      the Spark driver and tasks.
                    items:
                      type: string
                    type: array
                  loggingConfig:
                    description: The runtime logging config of the job
                    properties:
                      driverLogLevels:
                        additionalProperties:
                          type: string
                        description: 'Optional. The per-package log levels for the
                          driver. This may include ''root'' package name to configure
                          rootLogger. Examples: ''com.google = FATAL'', ''root = INFO'',
                          ''org.apache = DEBUG''.'
                        type: object
                    required:
                    - driverLogLevels
                    type: object
                  mainClass:
                    description: The class containing the main method of the driver.
                      Must be in a provided jar or jar that is already on the classpath.
                      Conflicts with main_jar_file_uri
                    type: string
                  mainJarFileURI:
                    description: The HCFS URI of jar file containing the driver jar.
                      Conflicts with main_class
                    type: string
                  properties:
                    additionalProperties:
                      type: string
                    description: A mapping of property names to values, used to configure
                      Spark. Properties that conflict with values set by the Cloud
                      Dataproc API may be overwritten. Can include properties set
                      in /etc/spark/conf/spark-defaults.conf and classes in user code.
                    type: object
                type: object
              hiveConfig:
                description: The config of hive job
                properties:
                  continueOnFailure:
                    description: Whether to continue executing queries if a query
                      fails. The default value is false. Setting to true can be useful
                      when executing independent parallel queries. Defaults to false.
                    type: boolean
                  jarFileUris:
                    description: HCFS URIs of jar files to add to the CLASSPATH of
                      the Hive server and Hadoop MapReduce (MR) tasks. Can contain
                      Hive SerDes and UDFs.
                    items:
                      type: string
                    type: array
                  properties:
                    additionalProperties:
                      type: string
                    description: A mapping of property names and values, used to configure
                      Hive. Properties that conflict with values set by the Cloud
                      Dataproc API may be overwritten. Can include properties set
                      in /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml,
                      and classes in user code.
                    type: object
                  queryFileURI:
                    description: HCFS URI of file containing Hive script to execute
                      as the job. Conflicts with query_list
                    type: string
                  queryList:
                    description: The list of Hive queries or statements to execute
                      as part of the job. Conflicts with query_file_uri
                    items:
                      type: string
                    type: array
                  scriptVariables:
                    additionalProperties:
                      type: string
                    description: 'Mapping of query variable names to values (equivalent
                      to the Hive command: SET name="value";).'
                    type: object
                type: object
              id:
                type: string
              kubeformOutput:
                properties:
                  driverControlsFilesURI:
                    description: Output-only. If present, the location of miscellaneous
                      control files which may be used as part of job setup and handling.
                      If not present, control files may be placed in the same location
                      as driver_output_uri.
                    type: string
                  driverOutputResourceURI:
                    description: Output-only. A URI pointing to the location of the
                      stdout of the job's driver program
                    type: string
                  forceDelete:
                    description: By default, you can only delete inactive jobs within
                      Dataproc. Setting this to true, and calling destroy, will ensure
                      that the job is first cancelled before issuing the delete.
                    type: boolean
                  hadoopConfig:
                    description: The config of Hadoop job
                    properties:
                      archiveUris:
                        description: HCFS URIs of archives to be extracted in the
                          working directory of .jar, .tar, .tar.gz, .tgz, and .zip.
                        items:
                          type: string
                        type: array
                      args:
                        description: The arguments to pass to the driver.
                        items:
                          type: string
                        type: array
                      fileUris:
                        description: HCFS URIs of files to be copied to the working
                          directory of Spark drivers and distributed tasks. Useful
                          for naively parallel tasks.
                        items:
                          type: string
                        type: array
                      jarFileUris:
                        description: HCFS URIs of jar files to add to the CLASSPATHs
                          of the Spark driver and tasks.
                        items:
                          type: string
                        type: array
                      loggingConfig:
                        description: The runtime logging config of the job
                        properties:
                          driverLogLevels:
                            additionalProperties:
                              type: string
                            description: 'Optional. The per-package log levels for
                              the driver. This may include ''root'' package name to
                              configure rootLogger. Examples: ''com.google = FATAL'',
                              ''root = INFO'', ''org.apache = DEBUG''.'
                            type: object
                        required:
                        - driverLogLevels
                        type: object
                      mainClass:
                        description: The class containing the main method of the driver.
                          Must be in a provided jar or jar that is already on the
                          classpath. Conflicts with main_jar_file_uri
                        type: string
                      mainJarFileURI:
                        description: The HCFS URI of jar file containing the driver
                          jar. Conflicts with main_class
                        type: string
                      properties:
                        additionalProperties:
                          type: string
                        description: A mapping of property names to values, used to
                          configure Spark. Properties that conflict with values set
                          by the Cloud Dataproc API may be overwritten. Can include
                          properties set in /etc/spark/conf/spark-defaults.conf and
                          classes in user code.
                        type: object
                    type: object
                  hiveConfig:
                    description: The config of hive job
                    properties:
                      continueOnFailure:
                        description: Whether to continue executing queries if a query
                          fails. The default value is false. Setting to true can be
                          useful when executing independent parallel queries. Defaults
                          to false.
                        type: boolean
                      jarFileUris:
                        description: HCFS URIs of jar files to add to the CLASSPATH
                          of the Hive server and Hadoop MapReduce (MR) tasks. Can
                          contain Hive SerDes and UDFs.
                        items:
                          type: string
                        type: array
                      properties:
                        additionalProperties:
                          type: string
                        description: A mapping of property names and values, used
                          to configure Hive. Properties that conflict with values
                          set by the Cloud Dataproc API may be overwritten. Can include
                          properties set in /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml,
                          and classes in user code.
                        type: object
                      queryFileURI:
                        description: HCFS URI of file containing Hive script to execute
                          as the job. Conflicts with query_list
                        type: string
                      queryList:
                        description: The list of Hive queries or statements to execute
                          as part of the job. Conflicts with query_file_uri
                        items:
                          type: string
                        type: array
                      scriptVariables:
                        additionalProperties:
                          type: string
                        description: 'Mapping of query variable names to values (equivalent
                          to the Hive command: SET name="value";).'
                        type: object
                    type: object
                  id:
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: Optional. The labels to associate with this job.
                    type: object
                  pigConfig:
                    description: The config of pag job.
                    properties:
                      continueOnFailure:
                        description: Whether to continue executing queries if a query
                          fails. The default value is false. Setting to true can be
                          useful when executing independent parallel queries. Defaults
                          to false.
                        type: boolean
                      jarFileUris:
                        description: HCFS URIs of jar files to add to the CLASSPATH
                          of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain
                          Pig UDFs.
                        items:
                          type: string
                        type: array
                      loggingConfig:
                        description: The runtime logging config of the job
                        properties:
                          driverLogLevels:
                            additionalProperties:
                              type: string
                            description: 'Optional. The per-package log levels for
                              the driver. This may include ''root'' package name to
                              configure rootLogger. Examples: ''com.google = FATAL'',
                              ''root = INFO'', ''org.apache = DEBUG''.'
                            type: object
                        required:
                        - driverLogLevels
                        type: object
                      properties:
                        additionalProperties:
                          type: string
                        description: A mapping of property names to values, used to
                          configure Pig. Properties that conflict with values set
                          by the Cloud Dataproc API may be overwritten. Can include
                          properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties,
                          and classes in user code.
                        type: object
                      queryFileURI:
                        description: HCFS URI of file containing Hive script to execute
                          as the job. Conflicts with query_list
                        type: string
                      queryList:
                        description: The list of Hive queries or statements to execute
                          as part of the job. Conflicts with query_file_uri
                        items:
                          type: string
                        type: array
                      scriptVariables:
                        additionalProperties:
                          type: string
                        description: 'Mapping of query variable names to values (equivalent
                          to the Pig command: name=[value]).'
                        type: object
                    type: object
                  placement:
                    description: The config of job placement.
                    properties:
                      clusterName:
                        description: The name of the cluster where the job will be
                          submitted
                        type: string
                      clusterUUID:
                        description: Output-only. A cluster UUID generated by the
                          Cloud Dataproc service when the job is submitted
                        type: string
                    required:
                    - clusterName
                    type: object
                  project:
                    description: The project in which the cluster can be found and
                      jobs subsequently run against. If it is not provided, the provider
                      project is used.
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  pysparkConfig:
                    description: The config of pySpark job.
                    properties:
                      archiveUris:
                        description: Optional. HCFS URIs of archives to be extracted
                          in the working directory of .jar, .tar, .tar.gz, .tgz, and
                          .zip
                        items:
                          type: string
                        type: array
                      args:
                        description: Optional. The arguments to pass to the driver.
                          Do not include arguments, such as --conf, that can be set
                          as job properties, since a collision may occur that causes
                          an incorrect job submission
                        items:
                          type: string
                        type: array
                      fileUris:
                        description: Optional. HCFS URIs of files to be copied to
                          the working directory of Python drivers and distributed
                          tasks. Useful for naively parallel tasks
                        items:
                          type: string
                        type: array
                      jarFileUris:
                        description: Optional. HCFS URIs of jar files to add to the
                          CLASSPATHs of the Python driver and tasks
                        items:
                          type: string
                        type: array
                      loggingConfig:
                        description: The runtime logging config of the job
                        properties:
                          driverLogLevels:
                            additionalProperties:
                              type: string
                            description: 'Optional. The per-package log levels for
                              the driver. This may include ''root'' package name to
                              configure rootLogger. Examples: ''com.google = FATAL'',
                              ''root = INFO'', ''org.apache = DEBUG''.'
                            type: object
                        required:
                        - driverLogLevels
                        type: object
                      mainPythonFileURI:
                        description: Required. The HCFS URI of the main Python file
                          to use as the driver. Must be a .py file
                        type: string
                      properties:
                        additionalProperties:
                          type: string
                        description: Optional. A mapping of property names to values,
                          used to configure PySpark. Properties that conflict with
                          values set by the Cloud Dataproc API may be overwritten.
                          Can include properties set in /etc/spark/conf/spark-defaults.conf
                          and classes in user code
                        type: object
                      pythonFileUris:
                        description: 'Optional. HCFS file URIs of Python files to
                          pass to the PySpark framework. Supported file types: .py,
                          .egg, and .zip'
                        items:
                          type: string
                        type: array
                    required:
                    - mainPythonFileURI
                    type: object
                  reference:
                    description: The reference of the job
                    properties:
                      jobID:
                        description: The job ID, which must be unique within the project.
                          The job ID is generated by the server upon job submission
                          or provided by the user as a means to perform retries without
                          creating duplicate jobs
                        type: string
                    type: object
                  region:
                    description: The Cloud Dataproc region. This essentially determines
                      which clusters are available for this job to be submitted to.
                      If not specified, defaults to global.
                    type: string
                  scheduling:
                    description: Optional. Job scheduling configuration.
                    properties:
                      maxFailuresPerHour:
                        description: Maximum number of times per hour a driver may
                          be restarted as a result of driver exiting with non-zero
                          code before job is reported failed.
                        format: int64
                        type: integer
                      maxFailuresTotal:
                        description: Maximum number of times in total a driver may
                          be restarted as a result of driver exiting with non-zero
                          code before job is reported failed.
                        format: int64
                        type: integer
                    required:
                    - maxFailuresPerHour
                    - maxFailuresTotal
                    type: object
                  sparkConfig:
                    description: The config of the Spark job.
                    properties:
                      archiveUris:
                        description: HCFS URIs of archives to be extracted in the
                          working directory of .jar, .tar, .tar.gz, .tgz, and .zip.
                        items:
                          type: string
                        type: array
                      args:
                        description: The arguments to pass to the driver.
                        items:
                          type: string
                        type: array
                      fileUris:
                        description: HCFS URIs of files to be copied to the working
                          directory of Spark drivers and distributed tasks. Useful
                          for naively parallel tasks.
                        items:
                          type: string
                        type: array
                      jarFileUris:
                        description: HCFS URIs of jar files to add to the CLASSPATHs
                          of the Spark driver and tasks.
                        items:
                          type: string
                        type: array
                      loggingConfig:
                        description: The runtime logging config of the job
                        properties:
                          driverLogLevels:
                            additionalProperties:
                              type: string
                            description: 'Optional. The per-package log levels for
                              the driver. This may include ''root'' package name to
                              configure rootLogger. Examples: ''com.google = FATAL'',
                              ''root = INFO'', ''org.apache = DEBUG''.'
                            type: object
                        required:
                        - driverLogLevels
                        type: object
                      mainClass:
                        description: The class containing the main method of the driver.
                          Must be in a provided jar or jar that is already on the
                          classpath. Conflicts with main_jar_file_uri
                        type: string
                      mainJarFileURI:
                        description: The HCFS URI of jar file containing the driver
                          jar. Conflicts with main_class
                        type: string
                      properties:
                        additionalProperties:
                          type: string
                        description: A mapping of property names to values, used to
                          configure Spark. Properties that conflict with values set
                          by the Cloud Dataproc API may be overwritten. Can include
                          properties set in /etc/spark/conf/spark-defaults.conf and
                          classes in user code.
                        type: object
                    type: object
                  sparksqlConfig:
                    description: The config of SparkSql job
                    properties:
                      jarFileUris:
                        description: HCFS URIs of jar files to be added to the Spark
                          CLASSPATH.
                        items:
                          type: string
                        type: array
                      loggingConfig:
                        description: The runtime logging config of the job
                        properties:
                          driverLogLevels:
                            additionalProperties:
                              type: string
                            description: 'Optional. The per-package log levels for
                              the driver. This may include ''root'' package name to
                              configure rootLogger. Examples: ''com.google = FATAL'',
                              ''root = INFO'', ''org.apache = DEBUG''.'
                            type: object
                        required:
                        - driverLogLevels
                        type: object
                      properties:
                        additionalProperties:
                          type: string
                        description: A mapping of property names to values, used to
                          configure Spark SQL's SparkConf. Properties that conflict
                          with values set by the Cloud Dataproc API may be overwritten.
                        type: object
                      queryFileURI:
                        description: The HCFS URI of the script that contains SQL
                          queries. Conflicts with query_list
                        type: string
                      queryList:
                        description: The list of SQL queries or statements to execute
                          as part of the job. Conflicts with query_file_uri
                        items:
                          type: string
                        type: array
                      scriptVariables:
                        additionalProperties:
                          type: string
                        description: 'Mapping of query variable names to values (equivalent
                          to the Spark SQL command: SET name="value";).'
                        type: object
                    type: object
                  status:
                    description: The status of the job.
                    items:
                      properties:
                        details:
                          description: Output-only. Optional job state details, such
                            as an error description if the state is ERROR
                          type: string
                        state:
                          description: Output-only. A state message specifying the
                            overall job state
                          type: string
                        stateStartTime:
                          description: Output-only. The time when this state was entered
                          type: string
                        substate:
                          description: Output-only. Additional state information,
                            which includes status reported by the agent
                          type: string
                      type: object
                    type: array
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  timeouts:
                    properties:
                      create:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      default:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      delete:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      read:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                      update:
                        description: A Duration represents the elapsed time between
                          two instants as an int64 nanosecond count. The representation
                          limits the largest representable duration to approximately
                          290 years.
                        format: int64
                        type: integer
                    type: object
                required:
                - placement
                - providerRef
                type: object
              labels:
                additionalProperties:
                  type: string
                description: Optional. The labels to associate with this job.
                type: object
              pigConfig:
                description: The config of pag job.
                properties:
                  continueOnFailure:
                    description: Whether to continue executing queries if a query
                      fails. The default value is false. Setting to true can be useful
                      when executing independent parallel queries. Defaults to false.
                    type: boolean
                  jarFileUris:
                    description: HCFS URIs of jar files to add to the CLASSPATH of
                      the Pig Client and Hadoop MapReduce (MR) tasks. Can contain
                      Pig UDFs.
                    items:
                      type: string
                    type: array
                  loggingConfig:
                    description: The runtime logging config of the job
                    properties:
                      driverLogLevels:
                        additionalProperties:
                          type: string
                        description: 'Optional. The per-package log levels for the
                          driver. This may include ''root'' package name to configure
                          rootLogger. Examples: ''com.google = FATAL'', ''root = INFO'',
                          ''org.apache = DEBUG''.'
                        type: object
                    required:
                    - driverLogLevels
                    type: object
                  properties:
                    additionalProperties:
                      type: string
                    description: A mapping of property names to values, used to configure
                      Pig. Properties that conflict with values set by the Cloud Dataproc
                      API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml,
                      /etc/pig/conf/pig.properties, and classes in user code.
                    type: object
                  queryFileURI:
                    description: HCFS URI of file containing Hive script to execute
                      as the job. Conflicts with query_list
                    type: string
                  queryList:
                    description: The list of Hive queries or statements to execute
                      as part of the job. Conflicts with query_file_uri
                    items:
                      type: string
                    type: array
                  scriptVariables:
                    additionalProperties:
                      type: string
                    description: 'Mapping of query variable names to values (equivalent
                      to the Pig command: name=[value]).'
                    type: object
                type: object
              placement:
                description: The config of job placement.
                properties:
                  clusterName:
                    description: The name of the cluster where the job will be submitted
                    type: string
                  clusterUUID:
                    description: Output-only. A cluster UUID generated by the Cloud
                      Dataproc service when the job is submitted
                    type: string
                required:
                - clusterName
                type: object
              project:
                description: The project in which the cluster can be found and jobs
                  subsequently run against. If it is not provided, the provider project
                  is used.
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              pysparkConfig:
                description: The config of pySpark job.
                properties:
                  archiveUris:
                    description: Optional. HCFS URIs of archives to be extracted in
                      the working directory of .jar, .tar, .tar.gz, .tgz, and .zip
                    items:
                      type: string
                    type: array
                  args:
                    description: Optional. The arguments to pass to the driver. Do
                      not include arguments, such as --conf, that can be set as job
                      properties, since a collision may occur that causes an incorrect
                      job submission
                    items:
                      type: string
                    type: array
                  fileUris:
                    description: Optional. HCFS URIs of files to be copied to the
                      working directory of Python drivers and distributed tasks. Useful
                      for naively parallel tasks
                    items:
                      type: string
                    type: array
                  jarFileUris:
                    description: Optional. HCFS URIs of jar files to add to the CLASSPATHs
                      of the Python driver and tasks
                    items:
                      type: string
                    type: array
                  loggingConfig:
                    description: The runtime logging config of the job
                    properties:
                      driverLogLevels:
                        additionalProperties:
                          type: string
                        description: 'Optional. The per-package log levels for the
                          driver. This may include ''root'' package name to configure
                          rootLogger. Examples: ''com.google = FATAL'', ''root = INFO'',
                          ''org.apache = DEBUG''.'
                        type: object
                    required:
                    - driverLogLevels
                    type: object
                  mainPythonFileURI:
                    description: Required. The HCFS URI of the main Python file to
                      use as the driver. Must be a .py file
                    type: string
                  properties:
                    additionalProperties:
                      type: string
                    description: Optional. A mapping of property names to values,
                      used to configure PySpark. Properties that conflict with values
                      set by the Cloud Dataproc API may be overwritten. Can include
                      properties set in /etc/spark/conf/spark-defaults.conf and classes
                      in user code
                    type: object
                  pythonFileUris:
                    description: 'Optional. HCFS file URIs of Python files to pass
                      to the PySpark framework. Supported file types: .py, .egg, and
                      .zip'
                    items:
                      type: string
                    type: array
                required:
                - mainPythonFileURI
                type: object
              reference:
                description: The reference of the job
                properties:
                  jobID:
                    description: The job ID, which must be unique within the project.
                      The job ID is generated by the server upon job submission or
                      provided by the user as a means to perform retries without creating
                      duplicate jobs
                    type: string
                type: object
              region:
                description: The Cloud Dataproc region. This essentially determines
                  which clusters are available for this job to be submitted to. If
                  not specified, defaults to global.
                type: string
              scheduling:
                description: Optional. Job scheduling configuration.
                properties:
                  maxFailuresPerHour:
                    description: Maximum number of times per hour a driver may be
                      restarted as a result of driver exiting with non-zero code before
                      job is reported failed.
                    format: int64
                    type: integer
                  maxFailuresTotal:
                    description: Maximum number of times in total a driver may be
                      restarted as a result of driver exiting with non-zero code before
                      job is reported failed.
                    format: int64
                    type: integer
                required:
                - maxFailuresPerHour
                - maxFailuresTotal
                type: object
              sparkConfig:
                description: The config of the Spark job.
                properties:
                  archiveUris:
                    description: HCFS URIs of archives to be extracted in the working
                      directory of .jar, .tar, .tar.gz, .tgz, and .zip.
                    items:
                      type: string
                    type: array
                  args:
                    description: The arguments to pass to the driver.
                    items:
                      type: string
                    type: array
                  fileUris:
                    description: HCFS URIs of files to be copied to the working directory
                      of Spark drivers and distributed tasks. Useful for naively parallel
                      tasks.
                    items:
                      type: string
                    type: array
                  jarFileUris:
                    description: HCFS URIs of jar files to add to the CLASSPATHs of
                      the Spark driver and tasks.
                    items:
                      type: string
                    type: array
                  loggingConfig:
                    description: The runtime logging config of the job
                    properties:
                      driverLogLevels:
                        additionalProperties:
                          type: string
                        description: 'Optional. The per-package log levels for the
                          driver. This may include ''root'' package name to configure
                          rootLogger. Examples: ''com.google = FATAL'', ''root = INFO'',
                          ''org.apache = DEBUG''.'
                        type: object
                    required:
                    - driverLogLevels
                    type: object
                  mainClass:
                    description: The class containing the main method of the driver.
                      Must be in a provided jar or jar that is already on the classpath.
                      Conflicts with main_jar_file_uri
                    type: string
                  mainJarFileURI:
                    description: The HCFS URI of jar file containing the driver jar.
                      Conflicts with main_class
                    type: string
                  properties:
                    additionalProperties:
                      type: string
                    description: A mapping of property names to values, used to configure
                      Spark. Properties that conflict with values set by the Cloud
                      Dataproc API may be overwritten. Can include properties set
                      in /etc/spark/conf/spark-defaults.conf and classes in user code.
                    type: object
                type: object
              sparksqlConfig:
                description: The config of SparkSql job
                properties:
                  jarFileUris:
                    description: HCFS URIs of jar files to be added to the Spark CLASSPATH.
                    items:
                      type: string
                    type: array
                  loggingConfig:
                    description: The runtime logging config of the job
                    properties:
                      driverLogLevels:
                        additionalProperties:
                          type: string
                        description: 'Optional. The per-package log levels for the
                          driver. This may include ''root'' package name to configure
                          rootLogger. Examples: ''com.google = FATAL'', ''root = INFO'',
                          ''org.apache = DEBUG''.'
                        type: object
                    required:
                    - driverLogLevels
                    type: object
                  properties:
                    additionalProperties:
                      type: string
                    description: A mapping of property names to values, used to configure
                      Spark SQL's SparkConf. Properties that conflict with values
                      set by the Cloud Dataproc API may be overwritten.
                    type: object
                  queryFileURI:
                    description: The HCFS URI of the script that contains SQL queries.
                      Conflicts with query_list
                    type: string
                  queryList:
                    description: The list of SQL queries or statements to execute
                      as part of the job. Conflicts with query_file_uri
                    items:
                      type: string
                    type: array
                  scriptVariables:
                    additionalProperties:
                      type: string
                    description: 'Mapping of query variable names to values (equivalent
                      to the Spark SQL command: SET name="value";).'
                    type: object
                type: object
              status:
                description: The status of the job.
                items:
                  properties:
                    details:
                      description: Output-only. Optional job state details, such as
                        an error description if the state is ERROR
                      type: string
                    state:
                      description: Output-only. A state message specifying the overall
                        job state
                      type: string
                    stateStartTime:
                      description: Output-only. The time when this state was entered
                      type: string
                    substate:
                      description: Output-only. Additional state information, which
                        includes status reported by the agent
                      type: string
                  type: object
                type: array
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              timeouts:
                properties:
                  create:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  default:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  delete:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  read:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                  update:
                    description: A Duration represents the elapsed time between two
                      instants as an int64 nanosecond count. The representation limits
                      the largest representable duration to approximately 290 years.
                    format: int64
                    type: integer
                type: object
            required:
            - placement
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: jobiammembers.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: JobIamMember
    listKind: JobIamMemberList
    plural: jobiammembers
    singular: jobiammember
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              condition:
                properties:
                  description:
                    type: string
                  expression:
                    type: string
                  title:
                    type: string
                required:
                - expression
                - title
                type: object
              etag:
                type: string
              id:
                type: string
              jobID:
                type: string
              kubeformOutput:
                properties:
                  condition:
                    properties:
                      description:
                        type: string
                      expression:
                        type: string
                      title:
                        type: string
                    required:
                    - expression
                    - title
                    type: object
                  etag:
                    type: string
                  id:
                    type: string
                  jobID:
                    type: string
                  member:
                    type: string
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    type: string
                  role:
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - jobID
                - member
                - providerRef
                - role
                type: object
              member:
                type: string
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                type: string
              role:
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - jobID
            - member
            - providerRef
            - role
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: jobiampolicies.dataproc.google.kubeform.com
spec:
  group: dataproc.google.kubeform.com
  names:
    kind: JobIamPolicy
    listKind: JobIamPolicyList
    plural: jobiampolicies
    singular: jobiampolicy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              etag:
                type: string
              id:
                type: string
              jobID:
                type: string
              kubeformOutput:
                properties:
                  etag:
                    type: string
                  id:
                    type: string
                  jobID:
                    type: string
                  policyData:
                    type: string
                  project:
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - jobID
                - policyData
                - providerRef
                type: object
              policyData:
                type: string
              project:
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - jobID
            - policyData
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: metrics
  name: metricsconfigurations.metrics.appscode.com
spec:
  group: metrics.appscode.com
  names:
    categories:
    - metrics
    - appscode
    - all
    kind: MetricsConfiguration
    listKind: MetricsConfigurationList
    plural: metricsconfigurations
    singular: metricsconfiguration
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.targetRef.apiVersion
      name: APIVersion
      type: string
    - jsonPath: .spec.targetRef.kind
      name: Kind
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MetricsConfigurationSpec is the spec of MetricsConfiguration
              object.
            properties:
              metrics:
                description: List of Metrics configuration for the resource object
                  defined in TargetRef
                items:
                  description: Metrics contains the configuration of a metric in prometheus
                    style.
                  properties:
                    field:
                      description: Field defines the metric value path of the manifest
                        file and the type of that value
                      properties:
                        path:
                          description: 'Path defines the json path of the object.
                            Example: For deployment spec replica count, the path will
                            be .spec.replicas'
                          type: string
                        type:
                          description: Type defines the type of the value in the given
                            Path Type can be "Integer" for integer value like .spec.replicas,
                            "DateTime" for time stamp value like .metadata.creationTimestamp
                            "Array" for array field like .spec.containers "String"
                            for string field like .statue.phase (for pod status)
                          enum:
                          - Integer
                          - DateTime
                          - Array
                          - String
                          type: string
                      required:
                      - path
                      - type
                      type: object
                    help:
                      description: 'Help is used to describe the metrics. Example:
                        For kube_deployment_spec_replicas, help string can be "Number
                        of desired pods for a deployment."'
                      type: string
                    labels:
                      description: Labels defines the metric labels as a key-value
                        pair
                      items:
                        description: "Label contains the information of a metric label.
                          Given labels are always added in the metrics along with
                          resource name and namespace. Resource's name and namespace
                          are always added in the labels by default. No configuration
                          is needed for name and namespace labels. \n Example: kube_pod_info{pod=\"<pod_name>\",
                          namespace=\"<pod_namespace>\", host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\",
                          node=\"kind-control-plane\"}  1 In the example pod, namespace,
                          host_ip, pod_ip, node are labels. pod(resource name) and
                          namespace are default labels. No configurations is needed
                          for those. \n To generate others labels, config should be
                          given in the following way \n labels:   - key: host_ip     valuePath:
                          .status.hostIP   - key: pod_ip     valuePath: .status.podIP
                          \  - key: node     valuePath: .spec.nodeName \n Either Value
                          or ValuePath must be specified for a Label. If both is specified,
                          ValuePath is ignored. Note that if a valuePath doesn't exist
                          for a label key, the label will be ignored."
                        properties:
                          key:
                            description: Key defines the label key
                            type: string
                          value:
                            description: 'Value defines the hard coded label value.
                              Example: labels:   - key: unit     value: byte   - key:
                              environment     value: production'
                            type: string
                          valuePath:
                            description: 'ValuePath defines the label value path.
                              Example: To add deployment''s resource version as labels,
                              labels:   - key: version     valuePath: .metadata.resourceVersion'
                            type: string
                        required:
                        - key
                        type: object
                      type: array
                    metricValue:
                      description: "MetricValue defines the configuration to obtain
                        metric value. \n Metrics must contain either States or MetricValue.
                        If both are specified, MetricValue will be ignored."
                      properties:
                        value:
                          description: "Value contains the metric value. It is always
                            equal to 1. It is defined when some information of the
                            object is collected as labels but there is no specific
                            metric value. \n Example: For metrics \"kube_pod_info\",
                            there are some information like host_ip, pod_ip, node
                            name is collected as labels. As there must be a metric
                            value, metric value is kept as 1. The metric will look
                            like `kube_pod_info{host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\",
                            node=\"kind-control-plane\" .....}  1`"
                          format: double
                          type: number
                        valueFromExpression:
                          description: "ValueFromExpression contains an expression
                            for the metric value expression can be a function as well.
                            Parameters is used in the expression string \n Available
                            expression evaluation functions are: \n toInt() returns
                            1 if the expression is true otherwise 0, example: toInt(phase
                            == 'Running') \n evaluatePercentage(a, b) returns the
                            value of (a * b%) example: evaluatePercentage(replicas,
                            maxUnavailable) \n calculateCPU() returns the cpu in unit
                            core example: calculateCPU(cpu), for cpu value 150m, it
                            will return 0.15 \n calculateMemory() returns the memory
                            size in byte example: calculateMemory(memory), for memory
                            value 1 ki, it will return 1024 \n toUnix() returns the
                            DateTime string into unix format. example: toUnix(dateTime)
                            will return the corresponding unix value for the given
                            dateTime \n in above examples phase, replicas, maxUnavailable,
                            cpu, memory, dateTime are Parameter's key those values
                            will come from corresponding Parameter's value"
                          type: string
                        valueFromPath:
                          description: "ValueFromPath contains the field path of the
                            manifest file of a object. ValueFromPath is used when
                            the metric value is coming from any specific json path
                            of the object. \n Example: For metrics \"kube_deployment_spec_replicas\",
                            the metricValue is coming from a specific path .spec.replicas
                            In this case, valueFromPath: .spec.replicas Some example
                            of json path: .metadata.observedGeneration, .spec.restartPolicy,
                            .status.startTime \n Some example of json path which is
                            coming from an element of an array: .spec.containers[*].image,
                            .status.containerStatuses[*].restartCount"
                          type: string
                      type: object
                    name:
                      description: 'Name defines the metrics name. Name should be
                        in snake case. Example: kube_deployment_spec_replicas'
                      type: string
                    params:
                      description: Params is list of parameters configuration used
                        in expression evaluation
                      items:
                        description: Parameter contains the information of a parameter
                          used in expression evaluation Parameter should contain an
                          user defined key and corresponding Value or ValuePath. Either
                          Value or ValuePath must be specified. If both are specified,
                          ValuePath is ignored.
                        properties:
                          key:
                            description: Key defines the parameter's key
                            type: string
                          value:
                            description: Value defines user defined parameter's value.
                            type: string
                          valuePath:
                            description: 'ValuePath defines the manifest field path
                              for the parameter''s value. Example: To add deployment''s
                              spec replica count as parameter, params:   - key: replica     valuePath:
                              .spec.replicas'
                            type: string
                        required:
                        - key
                        type: object
                      type: array
                    states:
                      description: "States handle metrics with label cardinality.
                        States specify the possible states for a label and their corresponding
                        MetricValue configuration. \n Metrics must contain either
                        States or MetricValue. If both are specified, MetricValue
                        will be ignored."
                      properties:
                        labelKey:
                          description: 'LabelKey defines an user defined label key
                            of the label which label cardinality is greater than one.
                            Example: For metric "kube_pod_status_phase", the LabelKey
                            can be "phase"'
                          type: string
                        values:
                          description: 'Values contains the list of state values.
                            The size of the list is always equal to the cardinality
                            of that label. Example: "kube_pod_statue_phase" metric
                            has a label "phase" which cardinality is equal to 5. So
                            Values should have StateValues config for all of them.'
                          items:
                            description: StateValues contains the information of a
                              state value. StateValues is used to define state with
                              all possible label values and corresponding MetricValue.
                            properties:
                              labelValue:
                                description: 'LabelValue defines the value of the
                                  label. Example: For labelKey "phase" (metric: kube_pod_status_phase
                                  path: .status.phase ) label value can be "Running",
                                  "Succeeded", "Failed", "Unknown" and "Pending"'
                                type: string
                              metricValue:
                                description: MetricValue defines the configuration
                                  of the metric value for the corresponding LabelValue
                                properties:
                                  value:
                                    description: "Value contains the metric value.
                                      It is always equal to 1. It is defined when
                                      some information of the object is collected
                                      as labels but there is no specific metric value.
                                      \n Example: For metrics \"kube_pod_info\", there
                                      are some information like host_ip, pod_ip, node
                                      name is collected as labels. As there must be
                                      a metric value, metric value is kept as 1. The
                                      metric will look like `kube_pod_info{host_ip=\"172.18.0.2\",
                                      pod_ip=\"10.244.0.14\", node=\"kind-control-plane\"
                                      .....}  1`"
                                    format: double
                                    type: number
                                  valueFromExpression:
                                    description: "ValueFromExpression contains an
                                      expression for the metric value expression can
                                      be a function as well. Parameters is used in
                                      the expression string \n Available expression
                                      evaluation functions are: \n toInt() returns
                                      1 if the expression is true otherwise 0, example:
                                      toInt(phase == 'Running') \n evaluatePercentage(a,
                                      b) returns the value of (a * b%) example: evaluatePercentage(replicas,
                                      maxUnavailable) \n calculateCPU() returns the
                                      cpu in unit core example: calculateCPU(cpu),
                                      for cpu value 150m, it will return 0.15 \n calculateMemory()
                                      returns the memory size in byte example: calculateMemory(memory),
                                      for memory value 1 ki, it will return 1024 \n
                                      toUnix() returns the DateTime string into unix
                                      format. example: toUnix(dateTime) will return
                                      the corresponding unix value for the given dateTime
                                      \n in above examples phase, replicas, maxUnavailable,
                                      cpu, memory, dateTime are Parameter's key those
                                      values will come from corresponding Parameter's
                                      value"
                                    type: string
                                  valueFromPath:
                                    description: "ValueFromPath contains the field
                                      path of the manifest file of a object. ValueFromPath
                                      is used when the metric value is coming from
                                      any specific json path of the object. \n Example:
                                      For metrics \"kube_deployment_spec_replicas\",
                                      the metricValue is coming from a specific path
                                      .spec.replicas In this case, valueFromPath:
                                      .spec.replicas Some example of json path: .metadata.observedGeneration,
                                      .spec.restartPolicy, .status.startTime \n Some
                                      example of json path which is coming from an
                                      element of an array: .spec.containers[*].image,
                                      .status.containerStatuses[*].restartCount"
                                    type: string
                                type: object
                            required:
                            - labelValue
                            - metricValue
                            type: object
                          type: array
                      required:
                      - labelKey
                      - values
                      type: object
                    type:
                      description: Type defines the metrics type. For kubernetes based
                        object, types can only be "gauge"
                      enum:
                      - gauge
                      type: string
                  required:
                  - help
                  - name
                  - type
                  type: object
                type: array
              targetRef:
                description: TargetRef defines the object for which metrics will be
                  collected
                properties:
                  apiVersion:
                    description: APIVersion defines the versioned schema of this representation
                      of an object.
                    type: string
                  kind:
                    description: Kind is a string value representing the REST resource
                      this object represents. In CamelCase.
                    type: string
                required:
                - apiVersion
                - kind
                type: object
            required:
            - metrics
            - targetRef
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
