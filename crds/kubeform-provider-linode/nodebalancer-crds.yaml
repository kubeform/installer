apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: configs.nodebalancer.linode.kubeform.com
spec:
  group: nodebalancer.linode.kubeform.com
  names:
    kind: Config
    listKind: ConfigList
    plural: configs
    singular: config
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              algorithm:
                description: 'What algorithm this NodeBalancer should use for routing
                  traffic to backends: roundrobin, leastconn, source'
                type: string
              check:
                description: The type of check to perform against backends to ensure
                  they are serving requests. This is used to determine if backends
                  are up or down. If none no check is performed. connection requires
                  only a connection to the backend to succeed. http and http_body
                  rely on the backend serving HTTP, and that the response returned
                  matches what is expected.
                type: string
              checkAttempts:
                description: How many times to attempt a check before considering
                  a backend to be down. (1-30)
                format: int64
                type: integer
              checkBody:
                description: This value must be present in the response body of the
                  check in order for it to pass. If this value is not present in the
                  response body of a check request, the backend is considered to be
                  down
                type: string
              checkInterval:
                description: How often, in seconds, to check that backends are up
                  and serving requests.
                format: int64
                type: integer
              checkPassive:
                description: If true, any response from this backend with a 5xx status
                  code will be enough for it to be considered unhealthy and taken
                  out of rotation.
                type: boolean
              checkPath:
                description: The URL path to check on each backend. If the backend
                  does not respond to this request it is considered to be down.
                type: string
              checkTimeout:
                description: How long, in seconds, to wait for a check attempt before
                  considering it failed. (1-30)
                format: int64
                type: integer
              cipherSuite:
                description: What ciphers to use for SSL connections served by this
                  NodeBalancer. `legacy` is considered insecure and should only be
                  used if necessary.
                type: string
              id:
                type: string
              kubeformOutput:
                properties:
                  algorithm:
                    description: 'What algorithm this NodeBalancer should use for
                      routing traffic to backends: roundrobin, leastconn, source'
                    type: string
                  check:
                    description: The type of check to perform against backends to
                      ensure they are serving requests. This is used to determine
                      if backends are up or down. If none no check is performed. connection
                      requires only a connection to the backend to succeed. http and
                      http_body rely on the backend serving HTTP, and that the response
                      returned matches what is expected.
                    type: string
                  checkAttempts:
                    description: How many times to attempt a check before considering
                      a backend to be down. (1-30)
                    format: int64
                    type: integer
                  checkBody:
                    description: This value must be present in the response body of
                      the check in order for it to pass. If this value is not present
                      in the response body of a check request, the backend is considered
                      to be down
                    type: string
                  checkInterval:
                    description: How often, in seconds, to check that backends are
                      up and serving requests.
                    format: int64
                    type: integer
                  checkPassive:
                    description: If true, any response from this backend with a 5xx
                      status code will be enough for it to be considered unhealthy
                      and taken out of rotation.
                    type: boolean
                  checkPath:
                    description: The URL path to check on each backend. If the backend
                      does not respond to this request it is considered to be down.
                    type: string
                  checkTimeout:
                    description: How long, in seconds, to wait for a check attempt
                      before considering it failed. (1-30)
                    format: int64
                    type: integer
                  cipherSuite:
                    description: What ciphers to use for SSL connections served by
                      this NodeBalancer. `legacy` is considered insecure and should
                      only be used if necessary.
                    type: string
                  id:
                    type: string
                  nodeStatus:
                    items:
                      properties:
                        down:
                          description: The number of backends considered to be 'DOWN'
                            and unhealthy. These are not in rotation, and not serving
                            requests.
                          format: int64
                          type: integer
                        up:
                          description: The number of backends considered to be 'UP'
                            and healthy, and that are serving requests.
                          format: int64
                          type: integer
                      type: object
                    type: array
                  nodebalancerID:
                    description: The ID of the NodeBalancer to access.
                    format: int64
                    type: integer
                  port:
                    description: The TCP port this Config is for. These values must
                      be unique across configs on a single NodeBalancer (you can't
                      have two configs for port 80, for example). While some ports
                      imply some protocols, no enforcement is done and you may configure
                      your NodeBalancer however is useful to you. For example, while
                      port 443 is generally used for HTTPS, you do not need SSL configured
                      to have a NodeBalancer listening on port 443.
                    format: int64
                    type: integer
                  protocol:
                    description: The protocol this port is configured to serve. If
                      this is set to https you must include an ssl_cert and an ssl_key.
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  proxyProtocol:
                    description: The version of ProxyProtocol to use for the underlying
                      NodeBalancer. This requires protocol to be `tcp`. Valid values
                      are `none`, `v1`, and `v2`.
                    type: string
                  secretRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  sslCommonname:
                    description: The read-only common name automatically derived from
                      the SSL certificate assigned to this NodeBalancerConfig. Please
                      refer to this field to verify that the appropriate certificate
                      is assigned to your NodeBalancerConfig.
                    type: string
                  sslFingerprint:
                    description: The read-only fingerprint automatically derived from
                      the SSL certificate assigned to this NodeBalancerConfig. Please
                      refer to this field to verify that the appropriate certificate
                      is assigned to your NodeBalancerConfig.
                    type: string
                  stickiness:
                    description: 'Controls how session stickiness is handled on this
                      port: ''none'', ''table'', ''http_cookie'''
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                required:
                - nodebalancerID
                - providerRef
                type: object
              nodeStatus:
                items:
                  properties:
                    down:
                      description: The number of backends considered to be 'DOWN'
                        and unhealthy. These are not in rotation, and not serving
                        requests.
                      format: int64
                      type: integer
                    up:
                      description: The number of backends considered to be 'UP' and
                        healthy, and that are serving requests.
                      format: int64
                      type: integer
                  type: object
                type: array
              nodebalancerID:
                description: The ID of the NodeBalancer to access.
                format: int64
                type: integer
              port:
                description: The TCP port this Config is for. These values must be
                  unique across configs on a single NodeBalancer (you can't have two
                  configs for port 80, for example). While some ports imply some protocols,
                  no enforcement is done and you may configure your NodeBalancer however
                  is useful to you. For example, while port 443 is generally used
                  for HTTPS, you do not need SSL configured to have a NodeBalancer
                  listening on port 443.
                format: int64
                type: integer
              protocol:
                description: The protocol this port is configured to serve. If this
                  is set to https you must include an ssl_cert and an ssl_key.
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              proxyProtocol:
                description: The version of ProxyProtocol to use for the underlying
                  NodeBalancer. This requires protocol to be `tcp`. Valid values are
                  `none`, `v1`, and `v2`.
                type: string
              secretRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              sslCommonname:
                description: The read-only common name automatically derived from
                  the SSL certificate assigned to this NodeBalancerConfig. Please
                  refer to this field to verify that the appropriate certificate is
                  assigned to your NodeBalancerConfig.
                type: string
              sslFingerprint:
                description: The read-only fingerprint automatically derived from
                  the SSL certificate assigned to this NodeBalancerConfig. Please
                  refer to this field to verify that the appropriate certificate is
                  assigned to your NodeBalancerConfig.
                type: string
              stickiness:
                description: 'Controls how session stickiness is handled on this port:
                  ''none'', ''table'', ''http_cookie'''
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
            required:
            - nodebalancerID
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: nodes.nodebalancer.linode.kubeform.com
spec:
  group: nodebalancer.linode.kubeform.com
  names:
    kind: Node
    listKind: NodeList
    plural: nodes
    singular: node
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              address:
                description: The private IP Address and port (IP:PORT) where this
                  backend can be reached. This must be a private IP address.
                type: string
              configID:
                description: The ID of the NodeBalancerConfig to access.
                format: int64
                type: integer
              id:
                type: string
              kubeformOutput:
                properties:
                  address:
                    description: The private IP Address and port (IP:PORT) where this
                      backend can be reached. This must be a private IP address.
                    type: string
                  configID:
                    description: The ID of the NodeBalancerConfig to access.
                    format: int64
                    type: integer
                  id:
                    type: string
                  label:
                    description: The label for this node. This is for display purposes
                      only.
                    type: string
                  mode:
                    description: The mode this NodeBalancer should use when sending
                      traffic to this backend. If set to `accept` this backend is
                      accepting traffic. If set to `reject` this backend will not
                      receive traffic. If set to `drain` this backend will not receive
                      new traffic, but connections already pinned to it will continue
                      to be routed to it. If set to `backup` this backend will only
                      accept traffic if all other nodes are down.
                    type: string
                  nodebalancerID:
                    description: The ID of the NodeBalancer to access.
                    format: int64
                    type: integer
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  status:
                    description: The current status of this node, based on the configured
                      checks of its NodeBalancer Config. (unknown, UP, DOWN)
                    type: string
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  weight:
                    description: Used when picking a backend to serve a request and
                      is not pinned to a single backend yet. Nodes with a higher weight
                      will receive more traffic. (1-255)
                    format: int64
                    type: integer
                required:
                - address
                - configID
                - label
                - nodebalancerID
                - providerRef
                type: object
              label:
                description: The label for this node. This is for display purposes
                  only.
                type: string
              mode:
                description: The mode this NodeBalancer should use when sending traffic
                  to this backend. If set to `accept` this backend is accepting traffic.
                  If set to `reject` this backend will not receive traffic. If set
                  to `drain` this backend will not receive new traffic, but connections
                  already pinned to it will continue to be routed to it. If set to
                  `backup` this backend will only accept traffic if all other nodes
                  are down.
                type: string
              nodebalancerID:
                description: The ID of the NodeBalancer to access.
                format: int64
                type: integer
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              status:
                description: The current status of this node, based on the configured
                  checks of its NodeBalancer Config. (unknown, UP, DOWN)
                type: string
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              weight:
                description: Used when picking a backend to serve a request and is
                  not pinned to a single backend yet. Nodes with a higher weight will
                  receive more traffic. (1-255)
                format: int64
                type: integer
            required:
            - address
            - configID
            - label
            - nodebalancerID
            - providerRef
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: metrics
  name: metricsconfigurations.metrics.appscode.com
spec:
  group: metrics.appscode.com
  names:
    categories:
    - metrics
    - appscode
    - all
    kind: MetricsConfiguration
    listKind: MetricsConfigurationList
    plural: metricsconfigurations
    singular: metricsconfiguration
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.targetRef.apiVersion
      name: APIVersion
      type: string
    - jsonPath: .spec.targetRef.kind
      name: Kind
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MetricsConfigurationSpec is the spec of MetricsConfiguration
              object.
            properties:
              metrics:
                description: List of Metrics configuration for the resource object
                  defined in TargetRef
                items:
                  description: Metrics contains the configuration of a metric in prometheus
                    style.
                  properties:
                    field:
                      description: Field defines the metric value path of the manifest
                        file and the type of that value
                      properties:
                        path:
                          description: 'Path defines the json path of the object.
                            Example: For deployment spec replica count, the path will
                            be .spec.replicas'
                          type: string
                        type:
                          description: Type defines the type of the value in the given
                            Path Type can be "Integer" for integer value like .spec.replicas,
                            "DateTime" for time stamp value like .metadata.creationTimestamp
                            "Array" for array field like .spec.containers "String"
                            for string field like .statue.phase (for pod status)
                          enum:
                          - Integer
                          - DateTime
                          - Array
                          - String
                          type: string
                      required:
                      - path
                      - type
                      type: object
                    help:
                      description: 'Help is used to describe the metrics. Example:
                        For kube_deployment_spec_replicas, help string can be "Number
                        of desired pods for a deployment."'
                      type: string
                    labels:
                      description: Labels defines the metric labels as a key-value
                        pair
                      items:
                        description: "Label contains the information of a metric label.
                          Given labels are always added in the metrics along with
                          resource name and namespace. Resource's name and namespace
                          are always added in the labels by default. No configuration
                          is needed for name and namespace labels. \n Example: kube_pod_info{pod=\"<pod_name>\",
                          namespace=\"<pod_namespace>\", host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\",
                          node=\"kind-control-plane\"}  1 In the example pod, namespace,
                          host_ip, pod_ip, node are labels. pod(resource name) and
                          namespace are default labels. No configurations is needed
                          for those. \n To generate others labels, config should be
                          given in the following way \n labels:   - key: host_ip     valuePath:
                          .status.hostIP   - key: pod_ip     valuePath: .status.podIP
                          \  - key: node     valuePath: .spec.nodeName \n Either Value
                          or ValuePath must be specified for a Label. If both is specified,
                          ValuePath is ignored. Note that if a valuePath doesn't exist
                          for a label key, the label will be ignored."
                        properties:
                          key:
                            description: Key defines the label key
                            type: string
                          value:
                            description: 'Value defines the hard coded label value.
                              Example: labels:   - key: unit     value: byte   - key:
                              environment     value: production'
                            type: string
                          valuePath:
                            description: 'ValuePath defines the label value path.
                              Example: To add deployment''s resource version as labels,
                              labels:   - key: version     valuePath: .metadata.resourceVersion'
                            type: string
                        required:
                        - key
                        type: object
                      type: array
                    metricValue:
                      description: "MetricValue defines the configuration to obtain
                        metric value. \n Metrics must contain either States or MetricValue.
                        If both are specified, MetricValue will be ignored."
                      properties:
                        value:
                          description: "Value contains the metric value. It is always
                            equal to 1. It is defined when some information of the
                            object is collected as labels but there is no specific
                            metric value. \n Example: For metrics \"kube_pod_info\",
                            there are some information like host_ip, pod_ip, node
                            name is collected as labels. As there must be a metric
                            value, metric value is kept as 1. The metric will look
                            like `kube_pod_info{host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\",
                            node=\"kind-control-plane\" .....}  1`"
                          format: double
                          type: number
                        valueFromExpression:
                          description: "ValueFromExpression contains an expression
                            for the metric value expression can be a function as well.
                            Parameters is used in the expression string \n Available
                            expression evaluation functions are: \n toInt() returns
                            1 if the expression is true otherwise 0, example: toInt(phase
                            == 'Running') \n evaluatePercentage(a, b) returns the
                            value of (a * b%) example: evaluatePercentage(replicas,
                            maxUnavailable) \n calculateCPU() returns the cpu in unit
                            core example: calculateCPU(cpu), for cpu value 150m, it
                            will return 0.15 \n calculateMemory() returns the memory
                            size in byte example: calculateMemory(memory), for memory
                            value 1 ki, it will return 1024 \n toUnix() returns the
                            DateTime string into unix format. example: toUnix(dateTime)
                            will return the corresponding unix value for the given
                            dateTime \n in above examples phase, replicas, maxUnavailable,
                            cpu, memory, dateTime are Parameter's key those values
                            will come from corresponding Parameter's value"
                          type: string
                        valueFromPath:
                          description: "ValueFromPath contains the field path of the
                            manifest file of a object. ValueFromPath is used when
                            the metric value is coming from any specific json path
                            of the object. \n Example: For metrics \"kube_deployment_spec_replicas\",
                            the metricValue is coming from a specific path .spec.replicas
                            In this case, valueFromPath: .spec.replicas Some example
                            of json path: .metadata.observedGeneration, .spec.restartPolicy,
                            .status.startTime \n Some example of json path which is
                            coming from an element of an array: .spec.containers[*].image,
                            .status.containerStatuses[*].restartCount"
                          type: string
                      type: object
                    name:
                      description: 'Name defines the metrics name. Name should be
                        in snake case. Example: kube_deployment_spec_replicas'
                      type: string
                    params:
                      description: Params is list of parameters configuration used
                        in expression evaluation
                      items:
                        description: Parameter contains the information of a parameter
                          used in expression evaluation Parameter should contain an
                          user defined key and corresponding Value or ValuePath. Either
                          Value or ValuePath must be specified. If both are specified,
                          ValuePath is ignored.
                        properties:
                          key:
                            description: Key defines the parameter's key
                            type: string
                          value:
                            description: Value defines user defined parameter's value.
                            type: string
                          valuePath:
                            description: 'ValuePath defines the manifest field path
                              for the parameter''s value. Example: To add deployment''s
                              spec replica count as parameter, params:   - key: replica     valuePath:
                              .spec.replicas'
                            type: string
                        required:
                        - key
                        type: object
                      type: array
                    states:
                      description: "States handle metrics with label cardinality.
                        States specify the possible states for a label and their corresponding
                        MetricValue configuration. \n Metrics must contain either
                        States or MetricValue. If both are specified, MetricValue
                        will be ignored."
                      properties:
                        labelKey:
                          description: 'LabelKey defines an user defined label key
                            of the label which label cardinality is greater than one.
                            Example: For metric "kube_pod_status_phase", the LabelKey
                            can be "phase"'
                          type: string
                        values:
                          description: 'Values contains the list of state values.
                            The size of the list is always equal to the cardinality
                            of that label. Example: "kube_pod_statue_phase" metric
                            has a label "phase" which cardinality is equal to 5. So
                            Values should have StateValues config for all of them.'
                          items:
                            description: StateValues contains the information of a
                              state value. StateValues is used to define state with
                              all possible label values and corresponding MetricValue.
                            properties:
                              labelValue:
                                description: 'LabelValue defines the value of the
                                  label. Example: For labelKey "phase" (metric: kube_pod_status_phase
                                  path: .status.phase ) label value can be "Running",
                                  "Succeeded", "Failed", "Unknown" and "Pending"'
                                type: string
                              metricValue:
                                description: MetricValue defines the configuration
                                  of the metric value for the corresponding LabelValue
                                properties:
                                  value:
                                    description: "Value contains the metric value.
                                      It is always equal to 1. It is defined when
                                      some information of the object is collected
                                      as labels but there is no specific metric value.
                                      \n Example: For metrics \"kube_pod_info\", there
                                      are some information like host_ip, pod_ip, node
                                      name is collected as labels. As there must be
                                      a metric value, metric value is kept as 1. The
                                      metric will look like `kube_pod_info{host_ip=\"172.18.0.2\",
                                      pod_ip=\"10.244.0.14\", node=\"kind-control-plane\"
                                      .....}  1`"
                                    format: double
                                    type: number
                                  valueFromExpression:
                                    description: "ValueFromExpression contains an
                                      expression for the metric value expression can
                                      be a function as well. Parameters is used in
                                      the expression string \n Available expression
                                      evaluation functions are: \n toInt() returns
                                      1 if the expression is true otherwise 0, example:
                                      toInt(phase == 'Running') \n evaluatePercentage(a,
                                      b) returns the value of (a * b%) example: evaluatePercentage(replicas,
                                      maxUnavailable) \n calculateCPU() returns the
                                      cpu in unit core example: calculateCPU(cpu),
                                      for cpu value 150m, it will return 0.15 \n calculateMemory()
                                      returns the memory size in byte example: calculateMemory(memory),
                                      for memory value 1 ki, it will return 1024 \n
                                      toUnix() returns the DateTime string into unix
                                      format. example: toUnix(dateTime) will return
                                      the corresponding unix value for the given dateTime
                                      \n in above examples phase, replicas, maxUnavailable,
                                      cpu, memory, dateTime are Parameter's key those
                                      values will come from corresponding Parameter's
                                      value"
                                    type: string
                                  valueFromPath:
                                    description: "ValueFromPath contains the field
                                      path of the manifest file of a object. ValueFromPath
                                      is used when the metric value is coming from
                                      any specific json path of the object. \n Example:
                                      For metrics \"kube_deployment_spec_replicas\",
                                      the metricValue is coming from a specific path
                                      .spec.replicas In this case, valueFromPath:
                                      .spec.replicas Some example of json path: .metadata.observedGeneration,
                                      .spec.restartPolicy, .status.startTime \n Some
                                      example of json path which is coming from an
                                      element of an array: .spec.containers[*].image,
                                      .status.containerStatuses[*].restartCount"
                                    type: string
                                type: object
                            required:
                            - labelValue
                            - metricValue
                            type: object
                          type: array
                      required:
                      - labelKey
                      - values
                      type: object
                    type:
                      description: Type defines the metrics type. For kubernetes based
                        object, types can only be "gauge"
                      enum:
                      - gauge
                      type: string
                  required:
                  - help
                  - name
                  - type
                  type: object
                type: array
              targetRef:
                description: TargetRef defines the object for which metrics will be
                  collected
                properties:
                  apiVersion:
                    description: APIVersion defines the versioned schema of this representation
                      of an object.
                    type: string
                  kind:
                    description: Kind is a string value representing the REST resource
                      this object represents. In CamelCase.
                    type: string
                required:
                - apiVersion
                - kind
                type: object
            required:
            - metrics
            - targetRef
            type: object
        type: object
    served: true
    storage: true
    subresources: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: nodebalancers.nodebalancer.linode.kubeform.com
spec:
  group: nodebalancer.linode.kubeform.com
  names:
    kind: Nodebalancer
    listKind: NodebalancerList
    plural: nodebalancers
    singular: nodebalancer
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              clientConnThrottle:
                description: Throttle connections per second (0-20). Set to 0 (zero)
                  to disable throttling.
                format: int64
                type: integer
              created:
                type: string
              hostname:
                description: This NodeBalancer's hostname, ending with .nodebalancer.linode.com
                type: string
              id:
                type: string
              ipv4:
                description: The Public IPv4 Address of this NodeBalancer
                type: string
              ipv6:
                description: The Public IPv6 Address of this NodeBalancer
                type: string
              kubeformOutput:
                properties:
                  clientConnThrottle:
                    description: Throttle connections per second (0-20). Set to 0
                      (zero) to disable throttling.
                    format: int64
                    type: integer
                  created:
                    type: string
                  hostname:
                    description: This NodeBalancer's hostname, ending with .nodebalancer.linode.com
                    type: string
                  id:
                    type: string
                  ipv4:
                    description: The Public IPv4 Address of this NodeBalancer
                    type: string
                  ipv6:
                    description: The Public IPv6 Address of this NodeBalancer
                    type: string
                  label:
                    description: The label of the Linode NodeBalancer.
                    type: string
                  providerRef:
                    description: LocalObjectReference contains enough information
                      to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  region:
                    description: The region where this NodeBalancer will be deployed.
                    type: string
                  tags:
                    description: An array of tags applied to this object. Tags are
                      for organizational purposes only.
                    items:
                      type: string
                    type: array
                  terminationPolicy:
                    enum:
                    - Delete
                    - DoNotTerminate
                    type: string
                  transfer:
                    items:
                      properties:
                        in:
                          description: The total transfer, in MB, used by this NodeBalancer
                            this month
                          format: double
                          type: number
                        out:
                          description: The total inbound transfer, in MB, used for
                            this NodeBalancer this month
                          format: double
                          type: number
                        total:
                          description: The total outbound transfer, in MB, used for
                            this NodeBalancer this month
                          format: double
                          type: number
                      type: object
                    type: array
                  updated:
                    type: string
                required:
                - providerRef
                - region
                type: object
              label:
                description: The label of the Linode NodeBalancer.
                type: string
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              region:
                description: The region where this NodeBalancer will be deployed.
                type: string
              tags:
                description: An array of tags applied to this object. Tags are for
                  organizational purposes only.
                items:
                  type: string
                type: array
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              transfer:
                items:
                  properties:
                    in:
                      description: The total transfer, in MB, used by this NodeBalancer
                        this month
                      format: double
                      type: number
                    out:
                      description: The total inbound transfer, in MB, used for this
                        NodeBalancer this month
                      format: double
                      type: number
                    total:
                      description: The total outbound transfer, in MB, used for this
                        NodeBalancer this month
                      format: double
                      type: number
                  type: object
                type: array
              updated:
                type: string
            required:
            - providerRef
            - region
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
